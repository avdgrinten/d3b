// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Config.proto

#ifndef PROTOBUF_proto_2fConfig_2eproto__INCLUDED
#define PROTOBUF_proto_2fConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace Db {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fConfig_2eproto();
void protobuf_AssignDesc_proto_2fConfig_2eproto();
void protobuf_ShutdownFile_proto_2fConfig_2eproto();

class Config;
class StorageConfig;
class ViewConfig;
class LogMutation;
class LogEntry;

enum LogMutation_Type {
  LogMutation_Type_kTypeNone = 0,
  LogMutation_Type_kTypeInsert = 1,
  LogMutation_Type_kTypeModify = 2
};
bool LogMutation_Type_IsValid(int value);
const LogMutation_Type LogMutation_Type_Type_MIN = LogMutation_Type_kTypeNone;
const LogMutation_Type LogMutation_Type_Type_MAX = LogMutation_Type_kTypeModify;
const int LogMutation_Type_Type_ARRAYSIZE = LogMutation_Type_Type_MAX + 1;

enum LogEntry_Type {
  LogEntry_Type_kTypeNone = 0,
  LogEntry_Type_kTypeSubmit = 1,
  LogEntry_Type_kTypeCommit = 2,
  LogEntry_Type_kTypeRollback = 3
};
bool LogEntry_Type_IsValid(int value);
const LogEntry_Type LogEntry_Type_Type_MIN = LogEntry_Type_kTypeNone;
const LogEntry_Type LogEntry_Type_Type_MAX = LogEntry_Type_kTypeRollback;
const int LogEntry_Type_Type_ARRAYSIZE = LogEntry_Type_Type_MAX + 1;

// ===================================================================

class Config : public ::google::protobuf::MessageLite {
 public:
  Config();
  virtual ~Config();
  
  Config(const Config& from);
  
  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Config& default_instance();
  
  void Swap(Config* other);
  
  // implements Message ----------------------------------------------
  
  Config* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Db.Proto.StorageConfig storage = 1;
  inline int storage_size() const;
  inline void clear_storage();
  static const int kStorageFieldNumber = 1;
  inline const ::Db::Proto::StorageConfig& storage(int index) const;
  inline ::Db::Proto::StorageConfig* mutable_storage(int index);
  inline ::Db::Proto::StorageConfig* add_storage();
  inline const ::google::protobuf::RepeatedPtrField< ::Db::Proto::StorageConfig >&
      storage() const;
  inline ::google::protobuf::RepeatedPtrField< ::Db::Proto::StorageConfig >*
      mutable_storage();
  
  // repeated .Db.Proto.ViewConfig views = 2;
  inline int views_size() const;
  inline void clear_views();
  static const int kViewsFieldNumber = 2;
  inline const ::Db::Proto::ViewConfig& views(int index) const;
  inline ::Db::Proto::ViewConfig* mutable_views(int index);
  inline ::Db::Proto::ViewConfig* add_views();
  inline const ::google::protobuf::RepeatedPtrField< ::Db::Proto::ViewConfig >&
      views() const;
  inline ::google::protobuf::RepeatedPtrField< ::Db::Proto::ViewConfig >*
      mutable_views();
  
  // @@protoc_insertion_point(class_scope:Db.Proto.Config)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::Db::Proto::StorageConfig > storage_;
  ::google::protobuf::RepeatedPtrField< ::Db::Proto::ViewConfig > views_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto();
  friend void protobuf_AssignDesc_proto_2fConfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fConfig_2eproto();
  
  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// -------------------------------------------------------------------

class StorageConfig : public ::google::protobuf::MessageLite {
 public:
  StorageConfig();
  virtual ~StorageConfig();
  
  StorageConfig(const StorageConfig& from);
  
  inline StorageConfig& operator=(const StorageConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StorageConfig& default_instance();
  
  void Swap(StorageConfig* other);
  
  // implements Message ----------------------------------------------
  
  StorageConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StorageConfig& from);
  void MergeFrom(const StorageConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string driver = 1;
  inline bool has_driver() const;
  inline void clear_driver();
  static const int kDriverFieldNumber = 1;
  inline const ::std::string& driver() const;
  inline void set_driver(const ::std::string& value);
  inline void set_driver(const char* value);
  inline void set_driver(const char* value, size_t size);
  inline ::std::string* mutable_driver();
  inline ::std::string* release_driver();
  
  // required string identifier = 2;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 2;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  
  // @@protoc_insertion_point(class_scope:Db.Proto.StorageConfig)
 private:
  inline void set_has_driver();
  inline void clear_has_driver();
  inline void set_has_identifier();
  inline void clear_has_identifier();
  
  ::std::string* driver_;
  ::std::string* identifier_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto();
  friend void protobuf_AssignDesc_proto_2fConfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fConfig_2eproto();
  
  void InitAsDefaultInstance();
  static StorageConfig* default_instance_;
};
// -------------------------------------------------------------------

class ViewConfig : public ::google::protobuf::MessageLite {
 public:
  ViewConfig();
  virtual ~ViewConfig();
  
  ViewConfig(const ViewConfig& from);
  
  inline ViewConfig& operator=(const ViewConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ViewConfig& default_instance();
  
  void Swap(ViewConfig* other);
  
  // implements Message ----------------------------------------------
  
  ViewConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ViewConfig& from);
  void MergeFrom(const ViewConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string driver = 1;
  inline bool has_driver() const;
  inline void clear_driver();
  static const int kDriverFieldNumber = 1;
  inline const ::std::string& driver() const;
  inline void set_driver(const ::std::string& value);
  inline void set_driver(const char* value);
  inline void set_driver(const char* value, size_t size);
  inline ::std::string* mutable_driver();
  inline ::std::string* release_driver();
  
  // required string identifier = 2;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 2;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  
  // optional string base_storage = 128;
  inline bool has_base_storage() const;
  inline void clear_base_storage();
  static const int kBaseStorageFieldNumber = 128;
  inline const ::std::string& base_storage() const;
  inline void set_base_storage(const ::std::string& value);
  inline void set_base_storage(const char* value);
  inline void set_base_storage(const char* value, size_t size);
  inline ::std::string* mutable_base_storage();
  inline ::std::string* release_base_storage();
  
  // optional string script_file = 129;
  inline bool has_script_file() const;
  inline void clear_script_file();
  static const int kScriptFileFieldNumber = 129;
  inline const ::std::string& script_file() const;
  inline void set_script_file(const ::std::string& value);
  inline void set_script_file(const char* value);
  inline void set_script_file(const char* value, size_t size);
  inline ::std::string* mutable_script_file();
  inline ::std::string* release_script_file();
  
  // @@protoc_insertion_point(class_scope:Db.Proto.ViewConfig)
 private:
  inline void set_has_driver();
  inline void clear_has_driver();
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_base_storage();
  inline void clear_has_base_storage();
  inline void set_has_script_file();
  inline void clear_has_script_file();
  
  ::std::string* driver_;
  ::std::string* identifier_;
  ::std::string* base_storage_;
  ::std::string* script_file_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto();
  friend void protobuf_AssignDesc_proto_2fConfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fConfig_2eproto();
  
  void InitAsDefaultInstance();
  static ViewConfig* default_instance_;
};
// -------------------------------------------------------------------

class LogMutation : public ::google::protobuf::MessageLite {
 public:
  LogMutation();
  virtual ~LogMutation();
  
  LogMutation(const LogMutation& from);
  
  inline LogMutation& operator=(const LogMutation& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const LogMutation& default_instance();
  
  void Swap(LogMutation* other);
  
  // implements Message ----------------------------------------------
  
  LogMutation* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LogMutation& from);
  void MergeFrom(const LogMutation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef LogMutation_Type Type;
  static const Type kTypeNone = LogMutation_Type_kTypeNone;
  static const Type kTypeInsert = LogMutation_Type_kTypeInsert;
  static const Type kTypeModify = LogMutation_Type_kTypeModify;
  static inline bool Type_IsValid(int value) {
    return LogMutation_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LogMutation_Type_Type_MIN;
  static const Type Type_MAX =
    LogMutation_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LogMutation_Type_Type_ARRAYSIZE;
  
  // accessors -------------------------------------------------------
  
  // optional .Db.Proto.LogMutation.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Db::Proto::LogMutation_Type type() const;
  inline void set_type(::Db::Proto::LogMutation_Type value);
  
  // optional string storage_name = 2;
  inline bool has_storage_name() const;
  inline void clear_storage_name();
  static const int kStorageNameFieldNumber = 2;
  inline const ::std::string& storage_name() const;
  inline void set_storage_name(const ::std::string& value);
  inline void set_storage_name(const char* value);
  inline void set_storage_name(const char* value, size_t size);
  inline ::std::string* mutable_storage_name();
  inline ::std::string* release_storage_name();
  
  // optional int64 document_id = 3;
  inline bool has_document_id() const;
  inline void clear_document_id();
  static const int kDocumentIdFieldNumber = 3;
  inline ::google::protobuf::int64 document_id() const;
  inline void set_document_id(::google::protobuf::int64 value);
  
  // optional string buffer = 4;
  inline bool has_buffer() const;
  inline void clear_buffer();
  static const int kBufferFieldNumber = 4;
  inline const ::std::string& buffer() const;
  inline void set_buffer(const ::std::string& value);
  inline void set_buffer(const char* value);
  inline void set_buffer(const char* value, size_t size);
  inline ::std::string* mutable_buffer();
  inline ::std::string* release_buffer();
  
  // @@protoc_insertion_point(class_scope:Db.Proto.LogMutation)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_storage_name();
  inline void clear_has_storage_name();
  inline void set_has_document_id();
  inline void clear_has_document_id();
  inline void set_has_buffer();
  inline void clear_has_buffer();
  
  ::std::string* storage_name_;
  ::google::protobuf::int64 document_id_;
  ::std::string* buffer_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto();
  friend void protobuf_AssignDesc_proto_2fConfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fConfig_2eproto();
  
  void InitAsDefaultInstance();
  static LogMutation* default_instance_;
};
// -------------------------------------------------------------------

class LogEntry : public ::google::protobuf::MessageLite {
 public:
  LogEntry();
  virtual ~LogEntry();
  
  LogEntry(const LogEntry& from);
  
  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const LogEntry& default_instance();
  
  void Swap(LogEntry* other);
  
  // implements Message ----------------------------------------------
  
  LogEntry* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef LogEntry_Type Type;
  static const Type kTypeNone = LogEntry_Type_kTypeNone;
  static const Type kTypeSubmit = LogEntry_Type_kTypeSubmit;
  static const Type kTypeCommit = LogEntry_Type_kTypeCommit;
  static const Type kTypeRollback = LogEntry_Type_kTypeRollback;
  static inline bool Type_IsValid(int value) {
    return LogEntry_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LogEntry_Type_Type_MIN;
  static const Type Type_MAX =
    LogEntry_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LogEntry_Type_Type_ARRAYSIZE;
  
  // accessors -------------------------------------------------------
  
  // optional .Db.Proto.LogEntry.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Db::Proto::LogEntry_Type type() const;
  inline void set_type(::Db::Proto::LogEntry_Type value);
  
  // optional int64 sequence_id = 2;
  inline bool has_sequence_id() const;
  inline void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 2;
  inline ::google::protobuf::int64 sequence_id() const;
  inline void set_sequence_id(::google::protobuf::int64 value);
  
  // optional int64 transaction_id = 3;
  inline bool has_transaction_id() const;
  inline void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 3;
  inline ::google::protobuf::int64 transaction_id() const;
  inline void set_transaction_id(::google::protobuf::int64 value);
  
  // repeated .Db.Proto.LogMutation mutations = 4;
  inline int mutations_size() const;
  inline void clear_mutations();
  static const int kMutationsFieldNumber = 4;
  inline const ::Db::Proto::LogMutation& mutations(int index) const;
  inline ::Db::Proto::LogMutation* mutable_mutations(int index);
  inline ::Db::Proto::LogMutation* add_mutations();
  inline const ::google::protobuf::RepeatedPtrField< ::Db::Proto::LogMutation >&
      mutations() const;
  inline ::google::protobuf::RepeatedPtrField< ::Db::Proto::LogMutation >*
      mutable_mutations();
  
  // @@protoc_insertion_point(class_scope:Db.Proto.LogEntry)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sequence_id();
  inline void clear_has_sequence_id();
  inline void set_has_transaction_id();
  inline void clear_has_transaction_id();
  
  ::google::protobuf::int64 sequence_id_;
  ::google::protobuf::int64 transaction_id_;
  ::google::protobuf::RepeatedPtrField< ::Db::Proto::LogMutation > mutations_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto();
  friend void protobuf_AssignDesc_proto_2fConfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fConfig_2eproto();
  
  void InitAsDefaultInstance();
  static LogEntry* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// repeated .Db.Proto.StorageConfig storage = 1;
inline int Config::storage_size() const {
  return storage_.size();
}
inline void Config::clear_storage() {
  storage_.Clear();
}
inline const ::Db::Proto::StorageConfig& Config::storage(int index) const {
  return storage_.Get(index);
}
inline ::Db::Proto::StorageConfig* Config::mutable_storage(int index) {
  return storage_.Mutable(index);
}
inline ::Db::Proto::StorageConfig* Config::add_storage() {
  return storage_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Db::Proto::StorageConfig >&
Config::storage() const {
  return storage_;
}
inline ::google::protobuf::RepeatedPtrField< ::Db::Proto::StorageConfig >*
Config::mutable_storage() {
  return &storage_;
}

// repeated .Db.Proto.ViewConfig views = 2;
inline int Config::views_size() const {
  return views_.size();
}
inline void Config::clear_views() {
  views_.Clear();
}
inline const ::Db::Proto::ViewConfig& Config::views(int index) const {
  return views_.Get(index);
}
inline ::Db::Proto::ViewConfig* Config::mutable_views(int index) {
  return views_.Mutable(index);
}
inline ::Db::Proto::ViewConfig* Config::add_views() {
  return views_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Db::Proto::ViewConfig >&
Config::views() const {
  return views_;
}
inline ::google::protobuf::RepeatedPtrField< ::Db::Proto::ViewConfig >*
Config::mutable_views() {
  return &views_;
}

// -------------------------------------------------------------------

// StorageConfig

// required string driver = 1;
inline bool StorageConfig::has_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageConfig::set_has_driver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageConfig::clear_has_driver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageConfig::clear_driver() {
  if (driver_ != &::google::protobuf::internal::kEmptyString) {
    driver_->clear();
  }
  clear_has_driver();
}
inline const ::std::string& StorageConfig::driver() const {
  return *driver_;
}
inline void StorageConfig::set_driver(const ::std::string& value) {
  set_has_driver();
  if (driver_ == &::google::protobuf::internal::kEmptyString) {
    driver_ = new ::std::string;
  }
  driver_->assign(value);
}
inline void StorageConfig::set_driver(const char* value) {
  set_has_driver();
  if (driver_ == &::google::protobuf::internal::kEmptyString) {
    driver_ = new ::std::string;
  }
  driver_->assign(value);
}
inline void StorageConfig::set_driver(const char* value, size_t size) {
  set_has_driver();
  if (driver_ == &::google::protobuf::internal::kEmptyString) {
    driver_ = new ::std::string;
  }
  driver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StorageConfig::mutable_driver() {
  set_has_driver();
  if (driver_ == &::google::protobuf::internal::kEmptyString) {
    driver_ = new ::std::string;
  }
  return driver_;
}
inline ::std::string* StorageConfig::release_driver() {
  clear_has_driver();
  if (driver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = driver_;
    driver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string identifier = 2;
inline bool StorageConfig::has_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageConfig::set_has_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageConfig::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageConfig::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& StorageConfig::identifier() const {
  return *identifier_;
}
inline void StorageConfig::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void StorageConfig::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void StorageConfig::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StorageConfig::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* StorageConfig::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ViewConfig

// required string driver = 1;
inline bool ViewConfig::has_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewConfig::set_has_driver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewConfig::clear_has_driver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewConfig::clear_driver() {
  if (driver_ != &::google::protobuf::internal::kEmptyString) {
    driver_->clear();
  }
  clear_has_driver();
}
inline const ::std::string& ViewConfig::driver() const {
  return *driver_;
}
inline void ViewConfig::set_driver(const ::std::string& value) {
  set_has_driver();
  if (driver_ == &::google::protobuf::internal::kEmptyString) {
    driver_ = new ::std::string;
  }
  driver_->assign(value);
}
inline void ViewConfig::set_driver(const char* value) {
  set_has_driver();
  if (driver_ == &::google::protobuf::internal::kEmptyString) {
    driver_ = new ::std::string;
  }
  driver_->assign(value);
}
inline void ViewConfig::set_driver(const char* value, size_t size) {
  set_has_driver();
  if (driver_ == &::google::protobuf::internal::kEmptyString) {
    driver_ = new ::std::string;
  }
  driver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ViewConfig::mutable_driver() {
  set_has_driver();
  if (driver_ == &::google::protobuf::internal::kEmptyString) {
    driver_ = new ::std::string;
  }
  return driver_;
}
inline ::std::string* ViewConfig::release_driver() {
  clear_has_driver();
  if (driver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = driver_;
    driver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string identifier = 2;
inline bool ViewConfig::has_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ViewConfig::set_has_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ViewConfig::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ViewConfig::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& ViewConfig::identifier() const {
  return *identifier_;
}
inline void ViewConfig::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void ViewConfig::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void ViewConfig::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ViewConfig::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* ViewConfig::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string base_storage = 128;
inline bool ViewConfig::has_base_storage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ViewConfig::set_has_base_storage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ViewConfig::clear_has_base_storage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ViewConfig::clear_base_storage() {
  if (base_storage_ != &::google::protobuf::internal::kEmptyString) {
    base_storage_->clear();
  }
  clear_has_base_storage();
}
inline const ::std::string& ViewConfig::base_storage() const {
  return *base_storage_;
}
inline void ViewConfig::set_base_storage(const ::std::string& value) {
  set_has_base_storage();
  if (base_storage_ == &::google::protobuf::internal::kEmptyString) {
    base_storage_ = new ::std::string;
  }
  base_storage_->assign(value);
}
inline void ViewConfig::set_base_storage(const char* value) {
  set_has_base_storage();
  if (base_storage_ == &::google::protobuf::internal::kEmptyString) {
    base_storage_ = new ::std::string;
  }
  base_storage_->assign(value);
}
inline void ViewConfig::set_base_storage(const char* value, size_t size) {
  set_has_base_storage();
  if (base_storage_ == &::google::protobuf::internal::kEmptyString) {
    base_storage_ = new ::std::string;
  }
  base_storage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ViewConfig::mutable_base_storage() {
  set_has_base_storage();
  if (base_storage_ == &::google::protobuf::internal::kEmptyString) {
    base_storage_ = new ::std::string;
  }
  return base_storage_;
}
inline ::std::string* ViewConfig::release_base_storage() {
  clear_has_base_storage();
  if (base_storage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = base_storage_;
    base_storage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string script_file = 129;
inline bool ViewConfig::has_script_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ViewConfig::set_has_script_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ViewConfig::clear_has_script_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ViewConfig::clear_script_file() {
  if (script_file_ != &::google::protobuf::internal::kEmptyString) {
    script_file_->clear();
  }
  clear_has_script_file();
}
inline const ::std::string& ViewConfig::script_file() const {
  return *script_file_;
}
inline void ViewConfig::set_script_file(const ::std::string& value) {
  set_has_script_file();
  if (script_file_ == &::google::protobuf::internal::kEmptyString) {
    script_file_ = new ::std::string;
  }
  script_file_->assign(value);
}
inline void ViewConfig::set_script_file(const char* value) {
  set_has_script_file();
  if (script_file_ == &::google::protobuf::internal::kEmptyString) {
    script_file_ = new ::std::string;
  }
  script_file_->assign(value);
}
inline void ViewConfig::set_script_file(const char* value, size_t size) {
  set_has_script_file();
  if (script_file_ == &::google::protobuf::internal::kEmptyString) {
    script_file_ = new ::std::string;
  }
  script_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ViewConfig::mutable_script_file() {
  set_has_script_file();
  if (script_file_ == &::google::protobuf::internal::kEmptyString) {
    script_file_ = new ::std::string;
  }
  return script_file_;
}
inline ::std::string* ViewConfig::release_script_file() {
  clear_has_script_file();
  if (script_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = script_file_;
    script_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogMutation

// optional .Db.Proto.LogMutation.Type type = 1;
inline bool LogMutation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogMutation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogMutation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogMutation::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Db::Proto::LogMutation_Type LogMutation::type() const {
  return static_cast< ::Db::Proto::LogMutation_Type >(type_);
}
inline void LogMutation::set_type(::Db::Proto::LogMutation_Type value) {
  GOOGLE_DCHECK(::Db::Proto::LogMutation_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string storage_name = 2;
inline bool LogMutation::has_storage_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogMutation::set_has_storage_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogMutation::clear_has_storage_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogMutation::clear_storage_name() {
  if (storage_name_ != &::google::protobuf::internal::kEmptyString) {
    storage_name_->clear();
  }
  clear_has_storage_name();
}
inline const ::std::string& LogMutation::storage_name() const {
  return *storage_name_;
}
inline void LogMutation::set_storage_name(const ::std::string& value) {
  set_has_storage_name();
  if (storage_name_ == &::google::protobuf::internal::kEmptyString) {
    storage_name_ = new ::std::string;
  }
  storage_name_->assign(value);
}
inline void LogMutation::set_storage_name(const char* value) {
  set_has_storage_name();
  if (storage_name_ == &::google::protobuf::internal::kEmptyString) {
    storage_name_ = new ::std::string;
  }
  storage_name_->assign(value);
}
inline void LogMutation::set_storage_name(const char* value, size_t size) {
  set_has_storage_name();
  if (storage_name_ == &::google::protobuf::internal::kEmptyString) {
    storage_name_ = new ::std::string;
  }
  storage_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMutation::mutable_storage_name() {
  set_has_storage_name();
  if (storage_name_ == &::google::protobuf::internal::kEmptyString) {
    storage_name_ = new ::std::string;
  }
  return storage_name_;
}
inline ::std::string* LogMutation::release_storage_name() {
  clear_has_storage_name();
  if (storage_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = storage_name_;
    storage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 document_id = 3;
inline bool LogMutation::has_document_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogMutation::set_has_document_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogMutation::clear_has_document_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogMutation::clear_document_id() {
  document_id_ = GOOGLE_LONGLONG(0);
  clear_has_document_id();
}
inline ::google::protobuf::int64 LogMutation::document_id() const {
  return document_id_;
}
inline void LogMutation::set_document_id(::google::protobuf::int64 value) {
  set_has_document_id();
  document_id_ = value;
}

// optional string buffer = 4;
inline bool LogMutation::has_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogMutation::set_has_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogMutation::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogMutation::clear_buffer() {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    buffer_->clear();
  }
  clear_has_buffer();
}
inline const ::std::string& LogMutation::buffer() const {
  return *buffer_;
}
inline void LogMutation::set_buffer(const ::std::string& value) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void LogMutation::set_buffer(const char* value) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void LogMutation::set_buffer(const char* value, size_t size) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMutation::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  return buffer_;
}
inline ::std::string* LogMutation::release_buffer() {
  clear_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buffer_;
    buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogEntry

// optional .Db.Proto.LogEntry.Type type = 1;
inline bool LogEntry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogEntry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogEntry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogEntry::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Db::Proto::LogEntry_Type LogEntry::type() const {
  return static_cast< ::Db::Proto::LogEntry_Type >(type_);
}
inline void LogEntry::set_type(::Db::Proto::LogEntry_Type value) {
  GOOGLE_DCHECK(::Db::Proto::LogEntry_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 sequence_id = 2;
inline bool LogEntry::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogEntry::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogEntry::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogEntry::clear_sequence_id() {
  sequence_id_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_id();
}
inline ::google::protobuf::int64 LogEntry::sequence_id() const {
  return sequence_id_;
}
inline void LogEntry::set_sequence_id(::google::protobuf::int64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
}

// optional int64 transaction_id = 3;
inline bool LogEntry::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogEntry::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogEntry::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogEntry::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
inline ::google::protobuf::int64 LogEntry::transaction_id() const {
  return transaction_id_;
}
inline void LogEntry::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
}

// repeated .Db.Proto.LogMutation mutations = 4;
inline int LogEntry::mutations_size() const {
  return mutations_.size();
}
inline void LogEntry::clear_mutations() {
  mutations_.Clear();
}
inline const ::Db::Proto::LogMutation& LogEntry::mutations(int index) const {
  return mutations_.Get(index);
}
inline ::Db::Proto::LogMutation* LogEntry::mutable_mutations(int index) {
  return mutations_.Mutable(index);
}
inline ::Db::Proto::LogMutation* LogEntry::add_mutations() {
  return mutations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Db::Proto::LogMutation >&
LogEntry::mutations() const {
  return mutations_;
}
inline ::google::protobuf::RepeatedPtrField< ::Db::Proto::LogMutation >*
LogEntry::mutable_mutations() {
  return &mutations_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Db

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fConfig_2eproto__INCLUDED
