// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Api.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/Api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace Api {
namespace Proto {

void protobuf_ShutdownFile_proto_2fApi_2eproto() {
  delete Mutation::default_instance_;
  delete Constraint::default_instance_;
  delete CqFetch::default_instance_;
  delete CqQuery::default_instance_;
  delete CqShortTransact::default_instance_;
  delete CqTransaction::default_instance_;
  delete CqUpdate::default_instance_;
  delete CqApply::default_instance_;
  delete CqCreateStorage::default_instance_;
  delete CqCreateView::default_instance_;
  delete CqUnlinkStorage::default_instance_;
  delete CqUnlinkView::default_instance_;
  delete CqUploadExtern::default_instance_;
  delete CqDownloadExtern::default_instance_;
  delete CqShutdown::default_instance_;
  delete SrFin::default_instance_;
  delete SrFin_MutationInfo::default_instance_;
  delete SrRows::default_instance_;
  delete SrBlob::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_proto_2fApi_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_proto_2fApi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::Db::Proto::protobuf_AddDesc_proto_2fConfig_2eproto();
  Mutation::default_instance_ = new Mutation();
  Constraint::default_instance_ = new Constraint();
  CqFetch::default_instance_ = new CqFetch();
  CqQuery::default_instance_ = new CqQuery();
  CqShortTransact::default_instance_ = new CqShortTransact();
  CqTransaction::default_instance_ = new CqTransaction();
  CqUpdate::default_instance_ = new CqUpdate();
  CqApply::default_instance_ = new CqApply();
  CqCreateStorage::default_instance_ = new CqCreateStorage();
  CqCreateView::default_instance_ = new CqCreateView();
  CqUnlinkStorage::default_instance_ = new CqUnlinkStorage();
  CqUnlinkView::default_instance_ = new CqUnlinkView();
  CqUploadExtern::default_instance_ = new CqUploadExtern();
  CqDownloadExtern::default_instance_ = new CqDownloadExtern();
  CqShutdown::default_instance_ = new CqShutdown();
  SrFin::default_instance_ = new SrFin();
  SrFin_MutationInfo::default_instance_ = new SrFin_MutationInfo();
  SrRows::default_instance_ = new SrRows();
  SrBlob::default_instance_ = new SrBlob();
  Mutation::default_instance_->InitAsDefaultInstance();
  Constraint::default_instance_->InitAsDefaultInstance();
  CqFetch::default_instance_->InitAsDefaultInstance();
  CqQuery::default_instance_->InitAsDefaultInstance();
  CqShortTransact::default_instance_->InitAsDefaultInstance();
  CqTransaction::default_instance_->InitAsDefaultInstance();
  CqUpdate::default_instance_->InitAsDefaultInstance();
  CqApply::default_instance_->InitAsDefaultInstance();
  CqCreateStorage::default_instance_->InitAsDefaultInstance();
  CqCreateView::default_instance_->InitAsDefaultInstance();
  CqUnlinkStorage::default_instance_->InitAsDefaultInstance();
  CqUnlinkView::default_instance_->InitAsDefaultInstance();
  CqUploadExtern::default_instance_->InitAsDefaultInstance();
  CqDownloadExtern::default_instance_->InitAsDefaultInstance();
  CqShutdown::default_instance_->InitAsDefaultInstance();
  SrFin::default_instance_->InitAsDefaultInstance();
  SrFin_MutationInfo::default_instance_->InitAsDefaultInstance();
  SrRows::default_instance_->InitAsDefaultInstance();
  SrBlob::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fApi_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_proto_2fApi_2eproto_once_);
void protobuf_AddDesc_proto_2fApi_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_proto_2fApi_2eproto_once_,
                 &protobuf_AddDesc_proto_2fApi_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fApi_2eproto {
  StaticDescriptorInitializer_proto_2fApi_2eproto() {
    protobuf_AddDesc_proto_2fApi_2eproto();
  }
} static_descriptor_initializer_proto_2fApi_2eproto_;
#endif
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 32:
    case 33:
    case 34:
    case 128:
    case 129:
      return true;
    default:
      return false;
  }
}

bool ClientRequests_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
      return true;
    default:
      return false;
  }
}

bool ServerResponses_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForMutation(
    Mutation* ptr) {
  return ptr->mutable_unknown_fields();
}

bool Mutation_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mutation_Type Mutation::kTypeNone;
const Mutation_Type Mutation::kTypeInsert;
const Mutation_Type Mutation::kTypeModify;
const Mutation_Type Mutation::Type_MIN;
const Mutation_Type Mutation::Type_MAX;
const int Mutation::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation::kTypeFieldNumber;
const int Mutation::kDocumentIdFieldNumber;
const int Mutation::kStorageNameFieldNumber;
const int Mutation::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation::Mutation()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.Mutation)
}

void Mutation::InitAsDefaultInstance() {
}

Mutation::Mutation(const Mutation& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.Mutation)
}

void Mutation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  document_id_ = GOOGLE_LONGLONG(0);
  storage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mutation::~Mutation() {
  // @@protoc_insertion_point(destructor:Api.Proto.Mutation)
  SharedDtor();
}

void Mutation::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storage_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Mutation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Mutation& Mutation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

Mutation* Mutation::default_instance_ = NULL;

Mutation* Mutation::New(::google::protobuf::Arena* arena) const {
  Mutation* n = new Mutation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.Mutation)
  if (_has_bits_[0 / 32] & 15u) {
    type_ = 0;
    document_id_ = GOOGLE_LONGLONG(0);
    if (has_storage_name()) {
      storage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_buffer()) {
      buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Mutation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForMutation, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.Mutation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Api.Proto.Mutation.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Api::Proto::Mutation_Type_IsValid(value)) {
            set_type(static_cast< ::Api::Proto::Mutation_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_document_id;
        break;
      }

      // optional int64 document_id = 2;
      case 2: {
        if (tag == 16) {
         parse_document_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &document_id_)));
          set_has_document_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_storage_name;
        break;
      }

      // optional string storage_name = 3;
      case 3: {
        if (tag == 26) {
         parse_storage_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_buffer;
        break;
      }

      // optional bytes buffer = 4;
      case 4: {
        if (tag == 34) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.Mutation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.Mutation)
  return false;
#undef DO_
}

void Mutation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.Mutation)
  // optional .Api.Proto.Mutation.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 document_id = 2;
  if (has_document_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->document_id(), output);
  }

  // optional string storage_name = 3;
  if (has_storage_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->storage_name(), output);
  }

  // optional bytes buffer = 4;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.Mutation)
}

int Mutation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.Mutation)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .Api.Proto.Mutation.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 document_id = 2;
    if (has_document_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->document_id());
    }

    // optional string storage_name = 3;
    if (has_storage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage_name());
    }

    // optional bytes buffer = 4;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Mutation*>(&from));
}

void Mutation::MergeFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.Mutation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_document_id()) {
      set_document_id(from.document_id());
    }
    if (from.has_storage_name()) {
      set_has_storage_name();
      storage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storage_name_);
    }
    if (from.has_buffer()) {
      set_has_buffer();
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Mutation::CopyFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutation::IsInitialized() const {

  return true;
}

void Mutation::Swap(Mutation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation::InternalSwap(Mutation* other) {
  std::swap(type_, other->type_);
  std::swap(document_id_, other->document_id_);
  storage_name_.Swap(&other->storage_name_);
  buffer_.Swap(&other->buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Mutation::GetTypeName() const {
  return "Api.Proto.Mutation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mutation

// optional .Api.Proto.Mutation.Type type = 1;
bool Mutation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Mutation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Mutation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Mutation::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::Api::Proto::Mutation_Type Mutation::type() const {
  // @@protoc_insertion_point(field_get:Api.Proto.Mutation.type)
  return static_cast< ::Api::Proto::Mutation_Type >(type_);
}
 void Mutation::set_type(::Api::Proto::Mutation_Type value) {
  assert(::Api::Proto::Mutation_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.Mutation.type)
}

// optional int64 document_id = 2;
bool Mutation::has_document_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Mutation::set_has_document_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Mutation::clear_has_document_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Mutation::clear_document_id() {
  document_id_ = GOOGLE_LONGLONG(0);
  clear_has_document_id();
}
 ::google::protobuf::int64 Mutation::document_id() const {
  // @@protoc_insertion_point(field_get:Api.Proto.Mutation.document_id)
  return document_id_;
}
 void Mutation::set_document_id(::google::protobuf::int64 value) {
  set_has_document_id();
  document_id_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.Mutation.document_id)
}

// optional string storage_name = 3;
bool Mutation::has_storage_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Mutation::set_has_storage_name() {
  _has_bits_[0] |= 0x00000004u;
}
void Mutation::clear_has_storage_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void Mutation::clear_storage_name() {
  storage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_storage_name();
}
 const ::std::string& Mutation::storage_name() const {
  // @@protoc_insertion_point(field_get:Api.Proto.Mutation.storage_name)
  return storage_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mutation::set_storage_name(const ::std::string& value) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.Mutation.storage_name)
}
 void Mutation::set_storage_name(const char* value) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.Mutation.storage_name)
}
 void Mutation::set_storage_name(const char* value, size_t size) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.Mutation.storage_name)
}
 ::std::string* Mutation::mutable_storage_name() {
  set_has_storage_name();
  // @@protoc_insertion_point(field_mutable:Api.Proto.Mutation.storage_name)
  return storage_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mutation::release_storage_name() {
  // @@protoc_insertion_point(field_release:Api.Proto.Mutation.storage_name)
  clear_has_storage_name();
  return storage_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mutation::set_allocated_storage_name(::std::string* storage_name) {
  if (storage_name != NULL) {
    set_has_storage_name();
  } else {
    clear_has_storage_name();
  }
  storage_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_name);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.Mutation.storage_name)
}

// optional bytes buffer = 4;
bool Mutation::has_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Mutation::set_has_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
void Mutation::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
void Mutation::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
 const ::std::string& Mutation::buffer() const {
  // @@protoc_insertion_point(field_get:Api.Proto.Mutation.buffer)
  return buffer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mutation::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.Mutation.buffer)
}
 void Mutation::set_buffer(const char* value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.Mutation.buffer)
}
 void Mutation::set_buffer(const void* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.Mutation.buffer)
}
 ::std::string* Mutation::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:Api.Proto.Mutation.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mutation::release_buffer() {
  // @@protoc_insertion_point(field_release:Api.Proto.Mutation.buffer)
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mutation::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.Mutation.buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForConstraint(
    Constraint* ptr) {
  return ptr->mutable_unknown_fields();
}

bool Constraint_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Constraint_Type Constraint::kTypeNone;
const Constraint_Type Constraint::kTypeDocumentState;
const Constraint_Type Constraint::Type_MIN;
const Constraint_Type Constraint::Type_MAX;
const int Constraint::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Constraint::kTypeFieldNumber;
const int Constraint::kStorageNameFieldNumber;
const int Constraint::kDocumentIdFieldNumber;
const int Constraint::kSequenceIdFieldNumber;
const int Constraint::kMustExistFieldNumber;
const int Constraint::kMatchSequenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Constraint::Constraint()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.Constraint)
}

void Constraint::InitAsDefaultInstance() {
}

Constraint::Constraint(const Constraint& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.Constraint)
}

void Constraint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  storage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_id_ = GOOGLE_LONGLONG(0);
  sequence_id_ = GOOGLE_LONGLONG(0);
  must_exist_ = false;
  match_sequence_id_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Constraint::~Constraint() {
  // @@protoc_insertion_point(destructor:Api.Proto.Constraint)
  SharedDtor();
}

void Constraint::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storage_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Constraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Constraint& Constraint::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

Constraint* Constraint::default_instance_ = NULL;

Constraint* Constraint::New(::google::protobuf::Arena* arena) const {
  Constraint* n = new Constraint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Constraint::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.Constraint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Constraint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Constraint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(document_id_, match_sequence_id_);
    if (has_storage_name()) {
      storage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Constraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForConstraint, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.Constraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Api.Proto.Constraint.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Api::Proto::Constraint_Type_IsValid(value)) {
            set_type(static_cast< ::Api::Proto::Constraint_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_storage_name;
        break;
      }

      // optional string storage_name = 2;
      case 2: {
        if (tag == 18) {
         parse_storage_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_document_id;
        break;
      }

      // optional int64 document_id = 3;
      case 3: {
        if (tag == 24) {
         parse_document_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &document_id_)));
          set_has_document_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sequence_id;
        break;
      }

      // optional int64 sequence_id = 4;
      case 4: {
        if (tag == 32) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_must_exist;
        break;
      }

      // optional bool must_exist = 5;
      case 5: {
        if (tag == 40) {
         parse_must_exist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &must_exist_)));
          set_has_must_exist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_match_sequence_id;
        break;
      }

      // optional bool match_sequence_id = 6;
      case 6: {
        if (tag == 48) {
         parse_match_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_sequence_id_)));
          set_has_match_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.Constraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.Constraint)
  return false;
#undef DO_
}

void Constraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.Constraint)
  // optional .Api.Proto.Constraint.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string storage_name = 2;
  if (has_storage_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->storage_name(), output);
  }

  // optional int64 document_id = 3;
  if (has_document_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->document_id(), output);
  }

  // optional int64 sequence_id = 4;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->sequence_id(), output);
  }

  // optional bool must_exist = 5;
  if (has_must_exist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->must_exist(), output);
  }

  // optional bool match_sequence_id = 6;
  if (has_match_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->match_sequence_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.Constraint)
}

int Constraint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.Constraint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .Api.Proto.Constraint.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string storage_name = 2;
    if (has_storage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage_name());
    }

    // optional int64 document_id = 3;
    if (has_document_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->document_id());
    }

    // optional int64 sequence_id = 4;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence_id());
    }

    // optional bool must_exist = 5;
    if (has_must_exist()) {
      total_size += 1 + 1;
    }

    // optional bool match_sequence_id = 6;
    if (has_match_sequence_id()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Constraint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Constraint*>(&from));
}

void Constraint::MergeFrom(const Constraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.Constraint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_storage_name()) {
      set_has_storage_name();
      storage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storage_name_);
    }
    if (from.has_document_id()) {
      set_document_id(from.document_id());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
    if (from.has_must_exist()) {
      set_must_exist(from.must_exist());
    }
    if (from.has_match_sequence_id()) {
      set_match_sequence_id(from.match_sequence_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Constraint::CopyFrom(const Constraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.Constraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constraint::IsInitialized() const {

  return true;
}

void Constraint::Swap(Constraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Constraint::InternalSwap(Constraint* other) {
  std::swap(type_, other->type_);
  storage_name_.Swap(&other->storage_name_);
  std::swap(document_id_, other->document_id_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(must_exist_, other->must_exist_);
  std::swap(match_sequence_id_, other->match_sequence_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Constraint::GetTypeName() const {
  return "Api.Proto.Constraint";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Constraint

// optional .Api.Proto.Constraint.Type type = 1;
bool Constraint::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Constraint::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Constraint::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Constraint::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::Api::Proto::Constraint_Type Constraint::type() const {
  // @@protoc_insertion_point(field_get:Api.Proto.Constraint.type)
  return static_cast< ::Api::Proto::Constraint_Type >(type_);
}
 void Constraint::set_type(::Api::Proto::Constraint_Type value) {
  assert(::Api::Proto::Constraint_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.Constraint.type)
}

// optional string storage_name = 2;
bool Constraint::has_storage_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Constraint::set_has_storage_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Constraint::clear_has_storage_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Constraint::clear_storage_name() {
  storage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_storage_name();
}
 const ::std::string& Constraint::storage_name() const {
  // @@protoc_insertion_point(field_get:Api.Proto.Constraint.storage_name)
  return storage_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Constraint::set_storage_name(const ::std::string& value) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.Constraint.storage_name)
}
 void Constraint::set_storage_name(const char* value) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.Constraint.storage_name)
}
 void Constraint::set_storage_name(const char* value, size_t size) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.Constraint.storage_name)
}
 ::std::string* Constraint::mutable_storage_name() {
  set_has_storage_name();
  // @@protoc_insertion_point(field_mutable:Api.Proto.Constraint.storage_name)
  return storage_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Constraint::release_storage_name() {
  // @@protoc_insertion_point(field_release:Api.Proto.Constraint.storage_name)
  clear_has_storage_name();
  return storage_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Constraint::set_allocated_storage_name(::std::string* storage_name) {
  if (storage_name != NULL) {
    set_has_storage_name();
  } else {
    clear_has_storage_name();
  }
  storage_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_name);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.Constraint.storage_name)
}

// optional int64 document_id = 3;
bool Constraint::has_document_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Constraint::set_has_document_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Constraint::clear_has_document_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Constraint::clear_document_id() {
  document_id_ = GOOGLE_LONGLONG(0);
  clear_has_document_id();
}
 ::google::protobuf::int64 Constraint::document_id() const {
  // @@protoc_insertion_point(field_get:Api.Proto.Constraint.document_id)
  return document_id_;
}
 void Constraint::set_document_id(::google::protobuf::int64 value) {
  set_has_document_id();
  document_id_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.Constraint.document_id)
}

// optional int64 sequence_id = 4;
bool Constraint::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Constraint::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Constraint::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Constraint::clear_sequence_id() {
  sequence_id_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_id();
}
 ::google::protobuf::int64 Constraint::sequence_id() const {
  // @@protoc_insertion_point(field_get:Api.Proto.Constraint.sequence_id)
  return sequence_id_;
}
 void Constraint::set_sequence_id(::google::protobuf::int64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.Constraint.sequence_id)
}

// optional bool must_exist = 5;
bool Constraint::has_must_exist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Constraint::set_has_must_exist() {
  _has_bits_[0] |= 0x00000010u;
}
void Constraint::clear_has_must_exist() {
  _has_bits_[0] &= ~0x00000010u;
}
void Constraint::clear_must_exist() {
  must_exist_ = false;
  clear_has_must_exist();
}
 bool Constraint::must_exist() const {
  // @@protoc_insertion_point(field_get:Api.Proto.Constraint.must_exist)
  return must_exist_;
}
 void Constraint::set_must_exist(bool value) {
  set_has_must_exist();
  must_exist_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.Constraint.must_exist)
}

// optional bool match_sequence_id = 6;
bool Constraint::has_match_sequence_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Constraint::set_has_match_sequence_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Constraint::clear_has_match_sequence_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Constraint::clear_match_sequence_id() {
  match_sequence_id_ = false;
  clear_has_match_sequence_id();
}
 bool Constraint::match_sequence_id() const {
  // @@protoc_insertion_point(field_get:Api.Proto.Constraint.match_sequence_id)
  return match_sequence_id_;
}
 void Constraint::set_match_sequence_id(bool value) {
  set_has_match_sequence_id();
  match_sequence_id_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.Constraint.match_sequence_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCqFetch(
    CqFetch* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CqFetch::kStorageNameFieldNumber;
const int CqFetch::kSequenceIdFieldNumber;
const int CqFetch::kDocumentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CqFetch::CqFetch()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.CqFetch)
}

void CqFetch::InitAsDefaultInstance() {
}

CqFetch::CqFetch(const CqFetch& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.CqFetch)
}

void CqFetch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_id_ = GOOGLE_LONGLONG(0);
  document_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqFetch::~CqFetch() {
  // @@protoc_insertion_point(destructor:Api.Proto.CqFetch)
  SharedDtor();
}

void CqFetch::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storage_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CqFetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqFetch& CqFetch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

CqFetch* CqFetch::default_instance_ = NULL;

CqFetch* CqFetch::New(::google::protobuf::Arena* arena) const {
  CqFetch* n = new CqFetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CqFetch::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.CqFetch)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CqFetch, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CqFetch*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(sequence_id_, document_id_);
    if (has_storage_name()) {
      storage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CqFetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCqFetch, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.CqFetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string storage_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence_id;
        break;
      }

      // optional int64 sequence_id = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_document_id;
        break;
      }

      // optional int64 document_id = 3;
      case 3: {
        if (tag == 24) {
         parse_document_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &document_id_)));
          set_has_document_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.CqFetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.CqFetch)
  return false;
#undef DO_
}

void CqFetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.CqFetch)
  // optional string storage_name = 1;
  if (has_storage_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->storage_name(), output);
  }

  // optional int64 sequence_id = 2;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence_id(), output);
  }

  // optional int64 document_id = 3;
  if (has_document_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->document_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.CqFetch)
}

int CqFetch::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.CqFetch)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string storage_name = 1;
    if (has_storage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage_name());
    }

    // optional int64 sequence_id = 2;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence_id());
    }

    // optional int64 document_id = 3;
    if (has_document_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->document_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqFetch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqFetch*>(&from));
}

void CqFetch::MergeFrom(const CqFetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.CqFetch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storage_name()) {
      set_has_storage_name();
      storage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storage_name_);
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
    if (from.has_document_id()) {
      set_document_id(from.document_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CqFetch::CopyFrom(const CqFetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.CqFetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqFetch::IsInitialized() const {

  return true;
}

void CqFetch::Swap(CqFetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CqFetch::InternalSwap(CqFetch* other) {
  storage_name_.Swap(&other->storage_name_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(document_id_, other->document_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CqFetch::GetTypeName() const {
  return "Api.Proto.CqFetch";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CqFetch

// optional string storage_name = 1;
bool CqFetch::has_storage_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CqFetch::set_has_storage_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CqFetch::clear_has_storage_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CqFetch::clear_storage_name() {
  storage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_storage_name();
}
 const ::std::string& CqFetch::storage_name() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqFetch.storage_name)
  return storage_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqFetch::set_storage_name(const ::std::string& value) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.CqFetch.storage_name)
}
 void CqFetch::set_storage_name(const char* value) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqFetch.storage_name)
}
 void CqFetch::set_storage_name(const char* value, size_t size) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqFetch.storage_name)
}
 ::std::string* CqFetch::mutable_storage_name() {
  set_has_storage_name();
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqFetch.storage_name)
  return storage_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CqFetch::release_storage_name() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqFetch.storage_name)
  clear_has_storage_name();
  return storage_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqFetch::set_allocated_storage_name(::std::string* storage_name) {
  if (storage_name != NULL) {
    set_has_storage_name();
  } else {
    clear_has_storage_name();
  }
  storage_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_name);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqFetch.storage_name)
}

// optional int64 sequence_id = 2;
bool CqFetch::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CqFetch::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CqFetch::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CqFetch::clear_sequence_id() {
  sequence_id_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_id();
}
 ::google::protobuf::int64 CqFetch::sequence_id() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqFetch.sequence_id)
  return sequence_id_;
}
 void CqFetch::set_sequence_id(::google::protobuf::int64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.CqFetch.sequence_id)
}

// optional int64 document_id = 3;
bool CqFetch::has_document_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CqFetch::set_has_document_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CqFetch::clear_has_document_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CqFetch::clear_document_id() {
  document_id_ = GOOGLE_LONGLONG(0);
  clear_has_document_id();
}
 ::google::protobuf::int64 CqFetch::document_id() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqFetch.document_id)
  return document_id_;
}
 void CqFetch::set_document_id(::google::protobuf::int64 value) {
  set_has_document_id();
  document_id_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.CqFetch.document_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCqQuery(
    CqQuery* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CqQuery::kViewNameFieldNumber;
const int CqQuery::kSequenceIdFieldNumber;
const int CqQuery::kKeysFieldNumber;
const int CqQuery::kFromKeyFieldNumber;
const int CqQuery::kToKeyFieldNumber;
const int CqQuery::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CqQuery::CqQuery()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.CqQuery)
}

void CqQuery::InitAsDefaultInstance() {
}

CqQuery::CqQuery(const CqQuery& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.CqQuery)
}

void CqQuery::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_id_ = GOOGLE_LONGLONG(0);
  from_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqQuery::~CqQuery() {
  // @@protoc_insertion_point(destructor:Api.Proto.CqQuery)
  SharedDtor();
}

void CqQuery::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CqQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqQuery& CqQuery::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

CqQuery* CqQuery::default_instance_ = NULL;

CqQuery* CqQuery::New(::google::protobuf::Arena* arena) const {
  CqQuery* n = new CqQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CqQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.CqQuery)
  if (_has_bits_[0 / 32] & 59u) {
    if (has_view_name()) {
      view_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sequence_id_ = GOOGLE_LONGLONG(0);
    if (has_from_key()) {
      from_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_to_key()) {
      to_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    limit_ = 0u;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CqQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCqQuery, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.CqQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string view_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_view_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence_id;
        break;
      }

      // optional int64 sequence_id = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 3;
      case 3: {
        if (tag == 26) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectTag(34)) goto parse_from_key;
        break;
      }

      // optional bytes from_key = 4;
      case 4: {
        if (tag == 34) {
         parse_from_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_to_key;
        break;
      }

      // optional bytes to_key = 5;
      case 5: {
        if (tag == 42) {
         parse_to_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_limit;
        break;
      }

      // optional uint32 limit = 6;
      case 6: {
        if (tag == 48) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.CqQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.CqQuery)
  return false;
#undef DO_
}

void CqQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.CqQuery)
  // optional string view_name = 1;
  if (has_view_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->view_name(), output);
  }

  // optional int64 sequence_id = 2;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence_id(), output);
  }

  // repeated bytes keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->keys(i), output);
  }

  // optional bytes from_key = 4;
  if (has_from_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->from_key(), output);
  }

  // optional bytes to_key = 5;
  if (has_to_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->to_key(), output);
  }

  // optional uint32 limit = 6;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->limit(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.CqQuery)
}

int CqQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.CqQuery)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 59u) {
    // optional string view_name = 1;
    if (has_view_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->view_name());
    }

    // optional int64 sequence_id = 2;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence_id());
    }

    // optional bytes from_key = 4;
    if (has_from_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from_key());
    }

    // optional bytes to_key = 5;
    if (has_to_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to_key());
    }

    // optional uint32 limit = 6;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  // repeated bytes keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqQuery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqQuery*>(&from));
}

void CqQuery::MergeFrom(const CqQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.CqQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_view_name()) {
      set_has_view_name();
      view_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_name_);
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
    if (from.has_from_key()) {
      set_has_from_key();
      from_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_key_);
    }
    if (from.has_to_key()) {
      set_has_to_key();
      to_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_key_);
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CqQuery::CopyFrom(const CqQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.CqQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqQuery::IsInitialized() const {

  return true;
}

void CqQuery::Swap(CqQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CqQuery::InternalSwap(CqQuery* other) {
  view_name_.Swap(&other->view_name_);
  std::swap(sequence_id_, other->sequence_id_);
  keys_.UnsafeArenaSwap(&other->keys_);
  from_key_.Swap(&other->from_key_);
  to_key_.Swap(&other->to_key_);
  std::swap(limit_, other->limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CqQuery::GetTypeName() const {
  return "Api.Proto.CqQuery";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CqQuery

// optional string view_name = 1;
bool CqQuery::has_view_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CqQuery::set_has_view_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CqQuery::clear_has_view_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CqQuery::clear_view_name() {
  view_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_view_name();
}
 const ::std::string& CqQuery::view_name() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqQuery.view_name)
  return view_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqQuery::set_view_name(const ::std::string& value) {
  set_has_view_name();
  view_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.CqQuery.view_name)
}
 void CqQuery::set_view_name(const char* value) {
  set_has_view_name();
  view_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqQuery.view_name)
}
 void CqQuery::set_view_name(const char* value, size_t size) {
  set_has_view_name();
  view_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqQuery.view_name)
}
 ::std::string* CqQuery::mutable_view_name() {
  set_has_view_name();
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqQuery.view_name)
  return view_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CqQuery::release_view_name() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqQuery.view_name)
  clear_has_view_name();
  return view_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqQuery::set_allocated_view_name(::std::string* view_name) {
  if (view_name != NULL) {
    set_has_view_name();
  } else {
    clear_has_view_name();
  }
  view_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), view_name);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqQuery.view_name)
}

// optional int64 sequence_id = 2;
bool CqQuery::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CqQuery::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CqQuery::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CqQuery::clear_sequence_id() {
  sequence_id_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_id();
}
 ::google::protobuf::int64 CqQuery::sequence_id() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqQuery.sequence_id)
  return sequence_id_;
}
 void CqQuery::set_sequence_id(::google::protobuf::int64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.CqQuery.sequence_id)
}

// repeated bytes keys = 3;
int CqQuery::keys_size() const {
  return keys_.size();
}
void CqQuery::clear_keys() {
  keys_.Clear();
}
 const ::std::string& CqQuery::keys(int index) const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqQuery.keys)
  return keys_.Get(index);
}
 ::std::string* CqQuery::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqQuery.keys)
  return keys_.Mutable(index);
}
 void CqQuery::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Api.Proto.CqQuery.keys)
  keys_.Mutable(index)->assign(value);
}
 void CqQuery::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqQuery.keys)
}
 void CqQuery::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqQuery.keys)
}
 ::std::string* CqQuery::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:Api.Proto.CqQuery.keys)
  return keys_.Add();
}
 void CqQuery::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Api.Proto.CqQuery.keys)
}
 void CqQuery::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Api.Proto.CqQuery.keys)
}
 void CqQuery::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Api.Proto.CqQuery.keys)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CqQuery::keys() const {
  // @@protoc_insertion_point(field_list:Api.Proto.CqQuery.keys)
  return keys_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CqQuery::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:Api.Proto.CqQuery.keys)
  return &keys_;
}

// optional bytes from_key = 4;
bool CqQuery::has_from_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CqQuery::set_has_from_key() {
  _has_bits_[0] |= 0x00000008u;
}
void CqQuery::clear_has_from_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void CqQuery::clear_from_key() {
  from_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_key();
}
 const ::std::string& CqQuery::from_key() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqQuery.from_key)
  return from_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqQuery::set_from_key(const ::std::string& value) {
  set_has_from_key();
  from_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.CqQuery.from_key)
}
 void CqQuery::set_from_key(const char* value) {
  set_has_from_key();
  from_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqQuery.from_key)
}
 void CqQuery::set_from_key(const void* value, size_t size) {
  set_has_from_key();
  from_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqQuery.from_key)
}
 ::std::string* CqQuery::mutable_from_key() {
  set_has_from_key();
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqQuery.from_key)
  return from_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CqQuery::release_from_key() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqQuery.from_key)
  clear_has_from_key();
  return from_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqQuery::set_allocated_from_key(::std::string* from_key) {
  if (from_key != NULL) {
    set_has_from_key();
  } else {
    clear_has_from_key();
  }
  from_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_key);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqQuery.from_key)
}

// optional bytes to_key = 5;
bool CqQuery::has_to_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CqQuery::set_has_to_key() {
  _has_bits_[0] |= 0x00000010u;
}
void CqQuery::clear_has_to_key() {
  _has_bits_[0] &= ~0x00000010u;
}
void CqQuery::clear_to_key() {
  to_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_key();
}
 const ::std::string& CqQuery::to_key() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqQuery.to_key)
  return to_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqQuery::set_to_key(const ::std::string& value) {
  set_has_to_key();
  to_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.CqQuery.to_key)
}
 void CqQuery::set_to_key(const char* value) {
  set_has_to_key();
  to_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqQuery.to_key)
}
 void CqQuery::set_to_key(const void* value, size_t size) {
  set_has_to_key();
  to_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqQuery.to_key)
}
 ::std::string* CqQuery::mutable_to_key() {
  set_has_to_key();
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqQuery.to_key)
  return to_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CqQuery::release_to_key() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqQuery.to_key)
  clear_has_to_key();
  return to_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqQuery::set_allocated_to_key(::std::string* to_key) {
  if (to_key != NULL) {
    set_has_to_key();
  } else {
    clear_has_to_key();
  }
  to_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_key);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqQuery.to_key)
}

// optional uint32 limit = 6;
bool CqQuery::has_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CqQuery::set_has_limit() {
  _has_bits_[0] |= 0x00000020u;
}
void CqQuery::clear_has_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
void CqQuery::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
 ::google::protobuf::uint32 CqQuery::limit() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqQuery.limit)
  return limit_;
}
 void CqQuery::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.CqQuery.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCqShortTransact(
    CqShortTransact* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CqShortTransact::kMutationsFieldNumber;
const int CqShortTransact::kConstraintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CqShortTransact::CqShortTransact()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.CqShortTransact)
}

void CqShortTransact::InitAsDefaultInstance() {
}

CqShortTransact::CqShortTransact(const CqShortTransact& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.CqShortTransact)
}

void CqShortTransact::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqShortTransact::~CqShortTransact() {
  // @@protoc_insertion_point(destructor:Api.Proto.CqShortTransact)
  SharedDtor();
}

void CqShortTransact::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CqShortTransact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqShortTransact& CqShortTransact::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

CqShortTransact* CqShortTransact::default_instance_ = NULL;

CqShortTransact* CqShortTransact::New(::google::protobuf::Arena* arena) const {
  CqShortTransact* n = new CqShortTransact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CqShortTransact::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.CqShortTransact)
  mutations_.Clear();
  constraints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CqShortTransact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCqShortTransact, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.CqShortTransact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Api.Proto.Mutation mutations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mutations;
        if (input->ExpectTag(18)) goto parse_loop_constraints;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Api.Proto.Constraint constraints = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_constraints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_constraints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_constraints;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.CqShortTransact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.CqShortTransact)
  return false;
#undef DO_
}

void CqShortTransact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.CqShortTransact)
  // repeated .Api.Proto.Mutation mutations = 1;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->mutations(i), output);
  }

  // repeated .Api.Proto.Constraint constraints = 2;
  for (unsigned int i = 0, n = this->constraints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->constraints(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.CqShortTransact)
}

int CqShortTransact::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.CqShortTransact)
  int total_size = 0;

  // repeated .Api.Proto.Mutation mutations = 1;
  total_size += 1 * this->mutations_size();
  for (int i = 0; i < this->mutations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutations(i));
  }

  // repeated .Api.Proto.Constraint constraints = 2;
  total_size += 1 * this->constraints_size();
  for (int i = 0; i < this->constraints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constraints(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqShortTransact::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqShortTransact*>(&from));
}

void CqShortTransact::MergeFrom(const CqShortTransact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.CqShortTransact)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mutations_.MergeFrom(from.mutations_);
  constraints_.MergeFrom(from.constraints_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CqShortTransact::CopyFrom(const CqShortTransact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.CqShortTransact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqShortTransact::IsInitialized() const {

  return true;
}

void CqShortTransact::Swap(CqShortTransact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CqShortTransact::InternalSwap(CqShortTransact* other) {
  mutations_.UnsafeArenaSwap(&other->mutations_);
  constraints_.UnsafeArenaSwap(&other->constraints_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CqShortTransact::GetTypeName() const {
  return "Api.Proto.CqShortTransact";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CqShortTransact

// repeated .Api.Proto.Mutation mutations = 1;
int CqShortTransact::mutations_size() const {
  return mutations_.size();
}
void CqShortTransact::clear_mutations() {
  mutations_.Clear();
}
const ::Api::Proto::Mutation& CqShortTransact::mutations(int index) const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqShortTransact.mutations)
  return mutations_.Get(index);
}
::Api::Proto::Mutation* CqShortTransact::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqShortTransact.mutations)
  return mutations_.Mutable(index);
}
::Api::Proto::Mutation* CqShortTransact::add_mutations() {
  // @@protoc_insertion_point(field_add:Api.Proto.CqShortTransact.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::Api::Proto::Mutation >*
CqShortTransact::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:Api.Proto.CqShortTransact.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::Api::Proto::Mutation >&
CqShortTransact::mutations() const {
  // @@protoc_insertion_point(field_list:Api.Proto.CqShortTransact.mutations)
  return mutations_;
}

// repeated .Api.Proto.Constraint constraints = 2;
int CqShortTransact::constraints_size() const {
  return constraints_.size();
}
void CqShortTransact::clear_constraints() {
  constraints_.Clear();
}
const ::Api::Proto::Constraint& CqShortTransact::constraints(int index) const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqShortTransact.constraints)
  return constraints_.Get(index);
}
::Api::Proto::Constraint* CqShortTransact::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqShortTransact.constraints)
  return constraints_.Mutable(index);
}
::Api::Proto::Constraint* CqShortTransact::add_constraints() {
  // @@protoc_insertion_point(field_add:Api.Proto.CqShortTransact.constraints)
  return constraints_.Add();
}
::google::protobuf::RepeatedPtrField< ::Api::Proto::Constraint >*
CqShortTransact::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:Api.Proto.CqShortTransact.constraints)
  return &constraints_;
}
const ::google::protobuf::RepeatedPtrField< ::Api::Proto::Constraint >&
CqShortTransact::constraints() const {
  // @@protoc_insertion_point(field_list:Api.Proto.CqShortTransact.constraints)
  return constraints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCqTransaction(
    CqTransaction* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CqTransaction::CqTransaction()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.CqTransaction)
}

void CqTransaction::InitAsDefaultInstance() {
}

CqTransaction::CqTransaction(const CqTransaction& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.CqTransaction)
}

void CqTransaction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqTransaction::~CqTransaction() {
  // @@protoc_insertion_point(destructor:Api.Proto.CqTransaction)
  SharedDtor();
}

void CqTransaction::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CqTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqTransaction& CqTransaction::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

CqTransaction* CqTransaction::default_instance_ = NULL;

CqTransaction* CqTransaction::New(::google::protobuf::Arena* arena) const {
  CqTransaction* n = new CqTransaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CqTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.CqTransaction)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CqTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCqTransaction, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.CqTransaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.CqTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.CqTransaction)
  return false;
#undef DO_
}

void CqTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.CqTransaction)
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.CqTransaction)
}

int CqTransaction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.CqTransaction)
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqTransaction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqTransaction*>(&from));
}

void CqTransaction::MergeFrom(const CqTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.CqTransaction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CqTransaction::CopyFrom(const CqTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.CqTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqTransaction::IsInitialized() const {

  return true;
}

void CqTransaction::Swap(CqTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CqTransaction::InternalSwap(CqTransaction* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CqTransaction::GetTypeName() const {
  return "Api.Proto.CqTransaction";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CqTransaction

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCqUpdate(
    CqUpdate* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CqUpdate::kTransactionIdFieldNumber;
const int CqUpdate::kMutationsFieldNumber;
const int CqUpdate::kConstraintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CqUpdate::CqUpdate()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.CqUpdate)
}

void CqUpdate::InitAsDefaultInstance() {
}

CqUpdate::CqUpdate(const CqUpdate& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.CqUpdate)
}

void CqUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqUpdate::~CqUpdate() {
  // @@protoc_insertion_point(destructor:Api.Proto.CqUpdate)
  SharedDtor();
}

void CqUpdate::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CqUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqUpdate& CqUpdate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

CqUpdate* CqUpdate::default_instance_ = NULL;

CqUpdate* CqUpdate::New(::google::protobuf::Arena* arena) const {
  CqUpdate* n = new CqUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CqUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.CqUpdate)
  transaction_id_ = GOOGLE_LONGLONG(0);
  mutations_.Clear();
  constraints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CqUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCqUpdate, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.CqUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mutations;
        break;
      }

      // repeated .Api.Proto.Mutation mutations = 2;
      case 2: {
        if (tag == 18) {
         parse_mutations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_mutations;
        if (input->ExpectTag(26)) goto parse_loop_constraints;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Api.Proto.Constraint constraints = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_constraints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_constraints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_constraints;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.CqUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.CqUpdate)
  return false;
#undef DO_
}

void CqUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.CqUpdate)
  // optional int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated .Api.Proto.Mutation mutations = 2;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->mutations(i), output);
  }

  // repeated .Api.Proto.Constraint constraints = 3;
  for (unsigned int i = 0, n = this->constraints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->constraints(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.CqUpdate)
}

int CqUpdate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.CqUpdate)
  int total_size = 0;

  // optional int64 transaction_id = 1;
  if (has_transaction_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  // repeated .Api.Proto.Mutation mutations = 2;
  total_size += 1 * this->mutations_size();
  for (int i = 0; i < this->mutations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutations(i));
  }

  // repeated .Api.Proto.Constraint constraints = 3;
  total_size += 1 * this->constraints_size();
  for (int i = 0; i < this->constraints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constraints(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqUpdate*>(&from));
}

void CqUpdate::MergeFrom(const CqUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.CqUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mutations_.MergeFrom(from.mutations_);
  constraints_.MergeFrom(from.constraints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CqUpdate::CopyFrom(const CqUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.CqUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqUpdate::IsInitialized() const {

  return true;
}

void CqUpdate::Swap(CqUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CqUpdate::InternalSwap(CqUpdate* other) {
  std::swap(transaction_id_, other->transaction_id_);
  mutations_.UnsafeArenaSwap(&other->mutations_);
  constraints_.UnsafeArenaSwap(&other->constraints_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CqUpdate::GetTypeName() const {
  return "Api.Proto.CqUpdate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CqUpdate

// optional int64 transaction_id = 1;
bool CqUpdate::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CqUpdate::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CqUpdate::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CqUpdate::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 CqUpdate::transaction_id() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqUpdate.transaction_id)
  return transaction_id_;
}
 void CqUpdate::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.CqUpdate.transaction_id)
}

// repeated .Api.Proto.Mutation mutations = 2;
int CqUpdate::mutations_size() const {
  return mutations_.size();
}
void CqUpdate::clear_mutations() {
  mutations_.Clear();
}
const ::Api::Proto::Mutation& CqUpdate::mutations(int index) const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqUpdate.mutations)
  return mutations_.Get(index);
}
::Api::Proto::Mutation* CqUpdate::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqUpdate.mutations)
  return mutations_.Mutable(index);
}
::Api::Proto::Mutation* CqUpdate::add_mutations() {
  // @@protoc_insertion_point(field_add:Api.Proto.CqUpdate.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::Api::Proto::Mutation >*
CqUpdate::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:Api.Proto.CqUpdate.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::Api::Proto::Mutation >&
CqUpdate::mutations() const {
  // @@protoc_insertion_point(field_list:Api.Proto.CqUpdate.mutations)
  return mutations_;
}

// repeated .Api.Proto.Constraint constraints = 3;
int CqUpdate::constraints_size() const {
  return constraints_.size();
}
void CqUpdate::clear_constraints() {
  constraints_.Clear();
}
const ::Api::Proto::Constraint& CqUpdate::constraints(int index) const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqUpdate.constraints)
  return constraints_.Get(index);
}
::Api::Proto::Constraint* CqUpdate::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqUpdate.constraints)
  return constraints_.Mutable(index);
}
::Api::Proto::Constraint* CqUpdate::add_constraints() {
  // @@protoc_insertion_point(field_add:Api.Proto.CqUpdate.constraints)
  return constraints_.Add();
}
::google::protobuf::RepeatedPtrField< ::Api::Proto::Constraint >*
CqUpdate::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:Api.Proto.CqUpdate.constraints)
  return &constraints_;
}
const ::google::protobuf::RepeatedPtrField< ::Api::Proto::Constraint >&
CqUpdate::constraints() const {
  // @@protoc_insertion_point(field_list:Api.Proto.CqUpdate.constraints)
  return constraints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCqApply(
    CqApply* ptr) {
  return ptr->mutable_unknown_fields();
}

bool CqApply_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CqApply_Type CqApply::kTypeNone;
const CqApply_Type CqApply::kTypeSubmit;
const CqApply_Type CqApply::kTypeSubmitCommit;
const CqApply_Type CqApply::kTypeCommit;
const CqApply_Type CqApply::kTypeRollback;
const CqApply_Type CqApply::Type_MIN;
const CqApply_Type CqApply::Type_MAX;
const int CqApply::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CqApply::kTransactionIdFieldNumber;
const int CqApply::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CqApply::CqApply()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.CqApply)
}

void CqApply::InitAsDefaultInstance() {
}

CqApply::CqApply(const CqApply& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.CqApply)
}

void CqApply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqApply::~CqApply() {
  // @@protoc_insertion_point(destructor:Api.Proto.CqApply)
  SharedDtor();
}

void CqApply::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CqApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqApply& CqApply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

CqApply* CqApply::default_instance_ = NULL;

CqApply* CqApply::New(::google::protobuf::Arena* arena) const {
  CqApply* n = new CqApply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CqApply::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.CqApply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CqApply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CqApply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(transaction_id_, type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CqApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCqApply, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.CqApply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .Api.Proto.CqApply.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Api::Proto::CqApply_Type_IsValid(value)) {
            set_type(static_cast< ::Api::Proto::CqApply_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.CqApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.CqApply)
  return false;
#undef DO_
}

void CqApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.CqApply)
  // optional int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // optional .Api.Proto.CqApply.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.CqApply)
}

int CqApply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.CqApply)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // optional .Api.Proto.CqApply.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqApply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqApply*>(&from));
}

void CqApply::MergeFrom(const CqApply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.CqApply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CqApply::CopyFrom(const CqApply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.CqApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqApply::IsInitialized() const {

  return true;
}

void CqApply::Swap(CqApply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CqApply::InternalSwap(CqApply* other) {
  std::swap(transaction_id_, other->transaction_id_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CqApply::GetTypeName() const {
  return "Api.Proto.CqApply";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CqApply

// optional int64 transaction_id = 1;
bool CqApply::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CqApply::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CqApply::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CqApply::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 CqApply::transaction_id() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqApply.transaction_id)
  return transaction_id_;
}
 void CqApply::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.CqApply.transaction_id)
}

// optional .Api.Proto.CqApply.Type type = 2;
bool CqApply::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CqApply::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CqApply::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CqApply::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::Api::Proto::CqApply_Type CqApply::type() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqApply.type)
  return static_cast< ::Api::Proto::CqApply_Type >(type_);
}
 void CqApply::set_type(::Api::Proto::CqApply_Type value) {
  assert(::Api::Proto::CqApply_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.CqApply.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCqCreateStorage(
    CqCreateStorage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CqCreateStorage::kDriverFieldNumber;
const int CqCreateStorage::kIdentifierFieldNumber;
const int CqCreateStorage::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CqCreateStorage::CqCreateStorage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.CqCreateStorage)
}

void CqCreateStorage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  config_ = const_cast< ::Db::Proto::StorageConfig*>(
      ::Db::Proto::StorageConfig::internal_default_instance());
#else
  config_ = const_cast< ::Db::Proto::StorageConfig*>(&::Db::Proto::StorageConfig::default_instance());
#endif
}

CqCreateStorage::CqCreateStorage(const CqCreateStorage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.CqCreateStorage)
}

void CqCreateStorage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqCreateStorage::~CqCreateStorage() {
  // @@protoc_insertion_point(destructor:Api.Proto.CqCreateStorage)
  SharedDtor();
}

void CqCreateStorage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete config_;
  }
}

void CqCreateStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqCreateStorage& CqCreateStorage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

CqCreateStorage* CqCreateStorage::default_instance_ = NULL;

CqCreateStorage* CqCreateStorage::New(::google::protobuf::Arena* arena) const {
  CqCreateStorage* n = new CqCreateStorage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CqCreateStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.CqCreateStorage)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_driver()) {
      driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_identifier()) {
      identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_config()) {
      if (config_ != NULL) config_->::Db::Proto::StorageConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CqCreateStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCqCreateStorage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.CqCreateStorage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string driver = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_identifier;
        break;
      }

      // optional string identifier = 2;
      case 2: {
        if (tag == 18) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_config;
        break;
      }

      // optional .Db.Proto.StorageConfig config = 3;
      case 3: {
        if (tag == 26) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.CqCreateStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.CqCreateStorage)
  return false;
#undef DO_
}

void CqCreateStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.CqCreateStorage)
  // optional string driver = 1;
  if (has_driver()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->driver(), output);
  }

  // optional string identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->identifier(), output);
  }

  // optional .Db.Proto.StorageConfig config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->config_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.CqCreateStorage)
}

int CqCreateStorage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.CqCreateStorage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string driver = 1;
    if (has_driver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver());
    }

    // optional string identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }

    // optional .Db.Proto.StorageConfig config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqCreateStorage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqCreateStorage*>(&from));
}

void CqCreateStorage::MergeFrom(const CqCreateStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.CqCreateStorage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_driver()) {
      set_has_driver();
      driver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_);
    }
    if (from.has_identifier()) {
      set_has_identifier();
      identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
    }
    if (from.has_config()) {
      mutable_config()->::Db::Proto::StorageConfig::MergeFrom(from.config());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CqCreateStorage::CopyFrom(const CqCreateStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.CqCreateStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqCreateStorage::IsInitialized() const {

  return true;
}

void CqCreateStorage::Swap(CqCreateStorage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CqCreateStorage::InternalSwap(CqCreateStorage* other) {
  driver_.Swap(&other->driver_);
  identifier_.Swap(&other->identifier_);
  std::swap(config_, other->config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CqCreateStorage::GetTypeName() const {
  return "Api.Proto.CqCreateStorage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CqCreateStorage

// optional string driver = 1;
bool CqCreateStorage::has_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CqCreateStorage::set_has_driver() {
  _has_bits_[0] |= 0x00000001u;
}
void CqCreateStorage::clear_has_driver() {
  _has_bits_[0] &= ~0x00000001u;
}
void CqCreateStorage::clear_driver() {
  driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_driver();
}
 const ::std::string& CqCreateStorage::driver() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqCreateStorage.driver)
  return driver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqCreateStorage::set_driver(const ::std::string& value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.CqCreateStorage.driver)
}
 void CqCreateStorage::set_driver(const char* value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqCreateStorage.driver)
}
 void CqCreateStorage::set_driver(const char* value, size_t size) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqCreateStorage.driver)
}
 ::std::string* CqCreateStorage::mutable_driver() {
  set_has_driver();
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqCreateStorage.driver)
  return driver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CqCreateStorage::release_driver() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqCreateStorage.driver)
  clear_has_driver();
  return driver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqCreateStorage::set_allocated_driver(::std::string* driver) {
  if (driver != NULL) {
    set_has_driver();
  } else {
    clear_has_driver();
  }
  driver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqCreateStorage.driver)
}

// optional string identifier = 2;
bool CqCreateStorage::has_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CqCreateStorage::set_has_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
void CqCreateStorage::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
void CqCreateStorage::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identifier();
}
 const ::std::string& CqCreateStorage::identifier() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqCreateStorage.identifier)
  return identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqCreateStorage::set_identifier(const ::std::string& value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.CqCreateStorage.identifier)
}
 void CqCreateStorage::set_identifier(const char* value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqCreateStorage.identifier)
}
 void CqCreateStorage::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqCreateStorage.identifier)
}
 ::std::string* CqCreateStorage::mutable_identifier() {
  set_has_identifier();
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqCreateStorage.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CqCreateStorage::release_identifier() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqCreateStorage.identifier)
  clear_has_identifier();
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqCreateStorage::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    set_has_identifier();
  } else {
    clear_has_identifier();
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqCreateStorage.identifier)
}

// optional .Db.Proto.StorageConfig config = 3;
bool CqCreateStorage::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CqCreateStorage::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
void CqCreateStorage::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
void CqCreateStorage::clear_config() {
  if (config_ != NULL) config_->::Db::Proto::StorageConfig::Clear();
  clear_has_config();
}
const ::Db::Proto::StorageConfig& CqCreateStorage::config() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqCreateStorage.config)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return config_ != NULL ? *config_ : *default_instance().config_;
#else
  return config_ != NULL ? *config_ : *default_instance_->config_;
#endif
}
::Db::Proto::StorageConfig* CqCreateStorage::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::Db::Proto::StorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqCreateStorage.config)
  return config_;
}
::Db::Proto::StorageConfig* CqCreateStorage::release_config() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqCreateStorage.config)
  clear_has_config();
  ::Db::Proto::StorageConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void CqCreateStorage::set_allocated_config(::Db::Proto::StorageConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqCreateStorage.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCqCreateView(
    CqCreateView* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CqCreateView::kDriverFieldNumber;
const int CqCreateView::kIdentifierFieldNumber;
const int CqCreateView::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CqCreateView::CqCreateView()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.CqCreateView)
}

void CqCreateView::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  config_ = const_cast< ::Db::Proto::ViewConfig*>(
      ::Db::Proto::ViewConfig::internal_default_instance());
#else
  config_ = const_cast< ::Db::Proto::ViewConfig*>(&::Db::Proto::ViewConfig::default_instance());
#endif
}

CqCreateView::CqCreateView(const CqCreateView& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.CqCreateView)
}

void CqCreateView::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqCreateView::~CqCreateView() {
  // @@protoc_insertion_point(destructor:Api.Proto.CqCreateView)
  SharedDtor();
}

void CqCreateView::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete config_;
  }
}

void CqCreateView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqCreateView& CqCreateView::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

CqCreateView* CqCreateView::default_instance_ = NULL;

CqCreateView* CqCreateView::New(::google::protobuf::Arena* arena) const {
  CqCreateView* n = new CqCreateView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CqCreateView::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.CqCreateView)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_driver()) {
      driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_identifier()) {
      identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_config()) {
      if (config_ != NULL) config_->::Db::Proto::ViewConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CqCreateView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCqCreateView, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.CqCreateView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string driver = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_identifier;
        break;
      }

      // optional string identifier = 2;
      case 2: {
        if (tag == 18) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_config;
        break;
      }

      // optional .Db.Proto.ViewConfig config = 3;
      case 3: {
        if (tag == 26) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.CqCreateView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.CqCreateView)
  return false;
#undef DO_
}

void CqCreateView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.CqCreateView)
  // optional string driver = 1;
  if (has_driver()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->driver(), output);
  }

  // optional string identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->identifier(), output);
  }

  // optional .Db.Proto.ViewConfig config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->config_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.CqCreateView)
}

int CqCreateView::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.CqCreateView)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string driver = 1;
    if (has_driver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver());
    }

    // optional string identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }

    // optional .Db.Proto.ViewConfig config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqCreateView::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqCreateView*>(&from));
}

void CqCreateView::MergeFrom(const CqCreateView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.CqCreateView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_driver()) {
      set_has_driver();
      driver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_);
    }
    if (from.has_identifier()) {
      set_has_identifier();
      identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
    }
    if (from.has_config()) {
      mutable_config()->::Db::Proto::ViewConfig::MergeFrom(from.config());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CqCreateView::CopyFrom(const CqCreateView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.CqCreateView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqCreateView::IsInitialized() const {

  return true;
}

void CqCreateView::Swap(CqCreateView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CqCreateView::InternalSwap(CqCreateView* other) {
  driver_.Swap(&other->driver_);
  identifier_.Swap(&other->identifier_);
  std::swap(config_, other->config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CqCreateView::GetTypeName() const {
  return "Api.Proto.CqCreateView";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CqCreateView

// optional string driver = 1;
bool CqCreateView::has_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CqCreateView::set_has_driver() {
  _has_bits_[0] |= 0x00000001u;
}
void CqCreateView::clear_has_driver() {
  _has_bits_[0] &= ~0x00000001u;
}
void CqCreateView::clear_driver() {
  driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_driver();
}
 const ::std::string& CqCreateView::driver() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqCreateView.driver)
  return driver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqCreateView::set_driver(const ::std::string& value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.CqCreateView.driver)
}
 void CqCreateView::set_driver(const char* value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqCreateView.driver)
}
 void CqCreateView::set_driver(const char* value, size_t size) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqCreateView.driver)
}
 ::std::string* CqCreateView::mutable_driver() {
  set_has_driver();
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqCreateView.driver)
  return driver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CqCreateView::release_driver() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqCreateView.driver)
  clear_has_driver();
  return driver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqCreateView::set_allocated_driver(::std::string* driver) {
  if (driver != NULL) {
    set_has_driver();
  } else {
    clear_has_driver();
  }
  driver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqCreateView.driver)
}

// optional string identifier = 2;
bool CqCreateView::has_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CqCreateView::set_has_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
void CqCreateView::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
void CqCreateView::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identifier();
}
 const ::std::string& CqCreateView::identifier() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqCreateView.identifier)
  return identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqCreateView::set_identifier(const ::std::string& value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.CqCreateView.identifier)
}
 void CqCreateView::set_identifier(const char* value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqCreateView.identifier)
}
 void CqCreateView::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqCreateView.identifier)
}
 ::std::string* CqCreateView::mutable_identifier() {
  set_has_identifier();
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqCreateView.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CqCreateView::release_identifier() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqCreateView.identifier)
  clear_has_identifier();
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqCreateView::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    set_has_identifier();
  } else {
    clear_has_identifier();
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqCreateView.identifier)
}

// optional .Db.Proto.ViewConfig config = 3;
bool CqCreateView::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CqCreateView::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
void CqCreateView::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
void CqCreateView::clear_config() {
  if (config_ != NULL) config_->::Db::Proto::ViewConfig::Clear();
  clear_has_config();
}
const ::Db::Proto::ViewConfig& CqCreateView::config() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqCreateView.config)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return config_ != NULL ? *config_ : *default_instance().config_;
#else
  return config_ != NULL ? *config_ : *default_instance_->config_;
#endif
}
::Db::Proto::ViewConfig* CqCreateView::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::Db::Proto::ViewConfig;
  }
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqCreateView.config)
  return config_;
}
::Db::Proto::ViewConfig* CqCreateView::release_config() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqCreateView.config)
  clear_has_config();
  ::Db::Proto::ViewConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void CqCreateView::set_allocated_config(::Db::Proto::ViewConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqCreateView.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCqUnlinkStorage(
    CqUnlinkStorage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CqUnlinkStorage::kIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CqUnlinkStorage::CqUnlinkStorage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.CqUnlinkStorage)
}

void CqUnlinkStorage::InitAsDefaultInstance() {
}

CqUnlinkStorage::CqUnlinkStorage(const CqUnlinkStorage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.CqUnlinkStorage)
}

void CqUnlinkStorage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqUnlinkStorage::~CqUnlinkStorage() {
  // @@protoc_insertion_point(destructor:Api.Proto.CqUnlinkStorage)
  SharedDtor();
}

void CqUnlinkStorage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CqUnlinkStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqUnlinkStorage& CqUnlinkStorage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

CqUnlinkStorage* CqUnlinkStorage::default_instance_ = NULL;

CqUnlinkStorage* CqUnlinkStorage::New(::google::protobuf::Arena* arena) const {
  CqUnlinkStorage* n = new CqUnlinkStorage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CqUnlinkStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.CqUnlinkStorage)
  if (has_identifier()) {
    identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CqUnlinkStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCqUnlinkStorage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.CqUnlinkStorage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.CqUnlinkStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.CqUnlinkStorage)
  return false;
#undef DO_
}

void CqUnlinkStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.CqUnlinkStorage)
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->identifier(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.CqUnlinkStorage)
}

int CqUnlinkStorage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.CqUnlinkStorage)
  int total_size = 0;

  // required string identifier = 1;
  if (has_identifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identifier());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqUnlinkStorage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqUnlinkStorage*>(&from));
}

void CqUnlinkStorage::MergeFrom(const CqUnlinkStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.CqUnlinkStorage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_has_identifier();
      identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CqUnlinkStorage::CopyFrom(const CqUnlinkStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.CqUnlinkStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqUnlinkStorage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CqUnlinkStorage::Swap(CqUnlinkStorage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CqUnlinkStorage::InternalSwap(CqUnlinkStorage* other) {
  identifier_.Swap(&other->identifier_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CqUnlinkStorage::GetTypeName() const {
  return "Api.Proto.CqUnlinkStorage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CqUnlinkStorage

// required string identifier = 1;
bool CqUnlinkStorage::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CqUnlinkStorage::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
void CqUnlinkStorage::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
void CqUnlinkStorage::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identifier();
}
 const ::std::string& CqUnlinkStorage::identifier() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqUnlinkStorage.identifier)
  return identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqUnlinkStorage::set_identifier(const ::std::string& value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.CqUnlinkStorage.identifier)
}
 void CqUnlinkStorage::set_identifier(const char* value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqUnlinkStorage.identifier)
}
 void CqUnlinkStorage::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqUnlinkStorage.identifier)
}
 ::std::string* CqUnlinkStorage::mutable_identifier() {
  set_has_identifier();
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqUnlinkStorage.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CqUnlinkStorage::release_identifier() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqUnlinkStorage.identifier)
  clear_has_identifier();
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqUnlinkStorage::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    set_has_identifier();
  } else {
    clear_has_identifier();
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqUnlinkStorage.identifier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCqUnlinkView(
    CqUnlinkView* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CqUnlinkView::kIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CqUnlinkView::CqUnlinkView()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.CqUnlinkView)
}

void CqUnlinkView::InitAsDefaultInstance() {
}

CqUnlinkView::CqUnlinkView(const CqUnlinkView& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.CqUnlinkView)
}

void CqUnlinkView::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqUnlinkView::~CqUnlinkView() {
  // @@protoc_insertion_point(destructor:Api.Proto.CqUnlinkView)
  SharedDtor();
}

void CqUnlinkView::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CqUnlinkView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqUnlinkView& CqUnlinkView::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

CqUnlinkView* CqUnlinkView::default_instance_ = NULL;

CqUnlinkView* CqUnlinkView::New(::google::protobuf::Arena* arena) const {
  CqUnlinkView* n = new CqUnlinkView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CqUnlinkView::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.CqUnlinkView)
  if (has_identifier()) {
    identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CqUnlinkView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCqUnlinkView, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.CqUnlinkView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.CqUnlinkView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.CqUnlinkView)
  return false;
#undef DO_
}

void CqUnlinkView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.CqUnlinkView)
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->identifier(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.CqUnlinkView)
}

int CqUnlinkView::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.CqUnlinkView)
  int total_size = 0;

  // required string identifier = 1;
  if (has_identifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identifier());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqUnlinkView::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqUnlinkView*>(&from));
}

void CqUnlinkView::MergeFrom(const CqUnlinkView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.CqUnlinkView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_has_identifier();
      identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CqUnlinkView::CopyFrom(const CqUnlinkView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.CqUnlinkView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqUnlinkView::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CqUnlinkView::Swap(CqUnlinkView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CqUnlinkView::InternalSwap(CqUnlinkView* other) {
  identifier_.Swap(&other->identifier_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CqUnlinkView::GetTypeName() const {
  return "Api.Proto.CqUnlinkView";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CqUnlinkView

// required string identifier = 1;
bool CqUnlinkView::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CqUnlinkView::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
void CqUnlinkView::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
void CqUnlinkView::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identifier();
}
 const ::std::string& CqUnlinkView::identifier() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqUnlinkView.identifier)
  return identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqUnlinkView::set_identifier(const ::std::string& value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.CqUnlinkView.identifier)
}
 void CqUnlinkView::set_identifier(const char* value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqUnlinkView.identifier)
}
 void CqUnlinkView::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqUnlinkView.identifier)
}
 ::std::string* CqUnlinkView::mutable_identifier() {
  set_has_identifier();
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqUnlinkView.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CqUnlinkView::release_identifier() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqUnlinkView.identifier)
  clear_has_identifier();
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqUnlinkView::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    set_has_identifier();
  } else {
    clear_has_identifier();
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqUnlinkView.identifier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCqUploadExtern(
    CqUploadExtern* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CqUploadExtern::kFileNameFieldNumber;
const int CqUploadExtern::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CqUploadExtern::CqUploadExtern()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.CqUploadExtern)
}

void CqUploadExtern::InitAsDefaultInstance() {
}

CqUploadExtern::CqUploadExtern(const CqUploadExtern& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.CqUploadExtern)
}

void CqUploadExtern::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqUploadExtern::~CqUploadExtern() {
  // @@protoc_insertion_point(destructor:Api.Proto.CqUploadExtern)
  SharedDtor();
}

void CqUploadExtern::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CqUploadExtern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqUploadExtern& CqUploadExtern::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

CqUploadExtern* CqUploadExtern::default_instance_ = NULL;

CqUploadExtern* CqUploadExtern::New(::google::protobuf::Arena* arena) const {
  CqUploadExtern* n = new CqUploadExtern;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CqUploadExtern::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.CqUploadExtern)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_file_name()) {
      file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_buffer()) {
      buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CqUploadExtern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCqUploadExtern, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.CqUploadExtern)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buffer;
        break;
      }

      // required bytes buffer = 2;
      case 2: {
        if (tag == 18) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.CqUploadExtern)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.CqUploadExtern)
  return false;
#undef DO_
}

void CqUploadExtern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.CqUploadExtern)
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // required bytes buffer = 2;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.CqUploadExtern)
}

int CqUploadExtern::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Api.Proto.CqUploadExtern)
  int total_size = 0;

  if (has_file_name()) {
    // required string file_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (has_buffer()) {
    // required bytes buffer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buffer());
  }

  return total_size;
}
int CqUploadExtern::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.CqUploadExtern)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string file_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());

    // required bytes buffer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buffer());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqUploadExtern::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqUploadExtern*>(&from));
}

void CqUploadExtern::MergeFrom(const CqUploadExtern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.CqUploadExtern)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (from.has_buffer()) {
      set_has_buffer();
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CqUploadExtern::CopyFrom(const CqUploadExtern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.CqUploadExtern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqUploadExtern::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CqUploadExtern::Swap(CqUploadExtern* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CqUploadExtern::InternalSwap(CqUploadExtern* other) {
  file_name_.Swap(&other->file_name_);
  buffer_.Swap(&other->buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CqUploadExtern::GetTypeName() const {
  return "Api.Proto.CqUploadExtern";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CqUploadExtern

// required string file_name = 1;
bool CqUploadExtern::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CqUploadExtern::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CqUploadExtern::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CqUploadExtern::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& CqUploadExtern::file_name() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqUploadExtern.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqUploadExtern::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.CqUploadExtern.file_name)
}
 void CqUploadExtern::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqUploadExtern.file_name)
}
 void CqUploadExtern::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqUploadExtern.file_name)
}
 ::std::string* CqUploadExtern::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqUploadExtern.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CqUploadExtern::release_file_name() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqUploadExtern.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqUploadExtern::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqUploadExtern.file_name)
}

// required bytes buffer = 2;
bool CqUploadExtern::has_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CqUploadExtern::set_has_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
void CqUploadExtern::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
void CqUploadExtern::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
 const ::std::string& CqUploadExtern::buffer() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqUploadExtern.buffer)
  return buffer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqUploadExtern::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.CqUploadExtern.buffer)
}
 void CqUploadExtern::set_buffer(const char* value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqUploadExtern.buffer)
}
 void CqUploadExtern::set_buffer(const void* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqUploadExtern.buffer)
}
 ::std::string* CqUploadExtern::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqUploadExtern.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CqUploadExtern::release_buffer() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqUploadExtern.buffer)
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqUploadExtern::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqUploadExtern.buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCqDownloadExtern(
    CqDownloadExtern* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CqDownloadExtern::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CqDownloadExtern::CqDownloadExtern()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.CqDownloadExtern)
}

void CqDownloadExtern::InitAsDefaultInstance() {
}

CqDownloadExtern::CqDownloadExtern(const CqDownloadExtern& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.CqDownloadExtern)
}

void CqDownloadExtern::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqDownloadExtern::~CqDownloadExtern() {
  // @@protoc_insertion_point(destructor:Api.Proto.CqDownloadExtern)
  SharedDtor();
}

void CqDownloadExtern::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CqDownloadExtern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqDownloadExtern& CqDownloadExtern::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

CqDownloadExtern* CqDownloadExtern::default_instance_ = NULL;

CqDownloadExtern* CqDownloadExtern::New(::google::protobuf::Arena* arena) const {
  CqDownloadExtern* n = new CqDownloadExtern;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CqDownloadExtern::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.CqDownloadExtern)
  if (has_file_name()) {
    file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CqDownloadExtern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCqDownloadExtern, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.CqDownloadExtern)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.CqDownloadExtern)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.CqDownloadExtern)
  return false;
#undef DO_
}

void CqDownloadExtern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.CqDownloadExtern)
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.CqDownloadExtern)
}

int CqDownloadExtern::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.CqDownloadExtern)
  int total_size = 0;

  // required string file_name = 1;
  if (has_file_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqDownloadExtern::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqDownloadExtern*>(&from));
}

void CqDownloadExtern::MergeFrom(const CqDownloadExtern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.CqDownloadExtern)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CqDownloadExtern::CopyFrom(const CqDownloadExtern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.CqDownloadExtern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqDownloadExtern::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CqDownloadExtern::Swap(CqDownloadExtern* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CqDownloadExtern::InternalSwap(CqDownloadExtern* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CqDownloadExtern::GetTypeName() const {
  return "Api.Proto.CqDownloadExtern";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CqDownloadExtern

// required string file_name = 1;
bool CqDownloadExtern::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CqDownloadExtern::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CqDownloadExtern::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CqDownloadExtern::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& CqDownloadExtern::file_name() const {
  // @@protoc_insertion_point(field_get:Api.Proto.CqDownloadExtern.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqDownloadExtern::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.CqDownloadExtern.file_name)
}
 void CqDownloadExtern::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.CqDownloadExtern.file_name)
}
 void CqDownloadExtern::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.CqDownloadExtern.file_name)
}
 ::std::string* CqDownloadExtern::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:Api.Proto.CqDownloadExtern.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CqDownloadExtern::release_file_name() {
  // @@protoc_insertion_point(field_release:Api.Proto.CqDownloadExtern.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CqDownloadExtern::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.CqDownloadExtern.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCqShutdown(
    CqShutdown* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CqShutdown::CqShutdown()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.CqShutdown)
}

void CqShutdown::InitAsDefaultInstance() {
}

CqShutdown::CqShutdown(const CqShutdown& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.CqShutdown)
}

void CqShutdown::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqShutdown::~CqShutdown() {
  // @@protoc_insertion_point(destructor:Api.Proto.CqShutdown)
  SharedDtor();
}

void CqShutdown::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CqShutdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqShutdown& CqShutdown::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

CqShutdown* CqShutdown::default_instance_ = NULL;

CqShutdown* CqShutdown::New(::google::protobuf::Arena* arena) const {
  CqShutdown* n = new CqShutdown;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CqShutdown::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.CqShutdown)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CqShutdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCqShutdown, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.CqShutdown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.CqShutdown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.CqShutdown)
  return false;
#undef DO_
}

void CqShutdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.CqShutdown)
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.CqShutdown)
}

int CqShutdown::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.CqShutdown)
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqShutdown::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqShutdown*>(&from));
}

void CqShutdown::MergeFrom(const CqShutdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.CqShutdown)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CqShutdown::CopyFrom(const CqShutdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.CqShutdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqShutdown::IsInitialized() const {

  return true;
}

void CqShutdown::Swap(CqShutdown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CqShutdown::InternalSwap(CqShutdown* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CqShutdown::GetTypeName() const {
  return "Api.Proto.CqShutdown";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CqShutdown

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSrFin(
    SrFin* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForSrFin_MutationInfo(
    SrFin_MutationInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrFin_MutationInfo::kDocumentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrFin_MutationInfo::SrFin_MutationInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.SrFin.MutationInfo)
}

void SrFin_MutationInfo::InitAsDefaultInstance() {
}

SrFin_MutationInfo::SrFin_MutationInfo(const SrFin_MutationInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.SrFin.MutationInfo)
}

void SrFin_MutationInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrFin_MutationInfo::~SrFin_MutationInfo() {
  // @@protoc_insertion_point(destructor:Api.Proto.SrFin.MutationInfo)
  SharedDtor();
}

void SrFin_MutationInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SrFin_MutationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SrFin_MutationInfo& SrFin_MutationInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

SrFin_MutationInfo* SrFin_MutationInfo::default_instance_ = NULL;

SrFin_MutationInfo* SrFin_MutationInfo::New(::google::protobuf::Arena* arena) const {
  SrFin_MutationInfo* n = new SrFin_MutationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SrFin_MutationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.SrFin.MutationInfo)
  document_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SrFin_MutationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSrFin_MutationInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.SrFin.MutationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 document_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &document_id_)));
          set_has_document_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.SrFin.MutationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.SrFin.MutationInfo)
  return false;
#undef DO_
}

void SrFin_MutationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.SrFin.MutationInfo)
  // optional int64 document_id = 1;
  if (has_document_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->document_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.SrFin.MutationInfo)
}

int SrFin_MutationInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.SrFin.MutationInfo)
  int total_size = 0;

  // optional int64 document_id = 1;
  if (has_document_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->document_id());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrFin_MutationInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SrFin_MutationInfo*>(&from));
}

void SrFin_MutationInfo::MergeFrom(const SrFin_MutationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.SrFin.MutationInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_document_id()) {
      set_document_id(from.document_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SrFin_MutationInfo::CopyFrom(const SrFin_MutationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.SrFin.MutationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrFin_MutationInfo::IsInitialized() const {

  return true;
}

void SrFin_MutationInfo::Swap(SrFin_MutationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrFin_MutationInfo::InternalSwap(SrFin_MutationInfo* other) {
  std::swap(document_id_, other->document_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SrFin_MutationInfo::GetTypeName() const {
  return "Api.Proto.SrFin.MutationInfo";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrFin::kErrorFieldNumber;
const int SrFin::kTransactionIdFieldNumber;
const int SrFin::kSequenceIdFieldNumber;
const int SrFin::kMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrFin::SrFin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.SrFin)
}

void SrFin::InitAsDefaultInstance() {
}

SrFin::SrFin(const SrFin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.SrFin)
}

void SrFin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  sequence_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrFin::~SrFin() {
  // @@protoc_insertion_point(destructor:Api.Proto.SrFin)
  SharedDtor();
}

void SrFin::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SrFin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SrFin& SrFin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

SrFin* SrFin::default_instance_ = NULL;

SrFin* SrFin::New(::google::protobuf::Arena* arena) const {
  SrFin* n = new SrFin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SrFin::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.SrFin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SrFin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SrFin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(transaction_id_, sequence_id_);
    error_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  mutations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SrFin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSrFin, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.SrFin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Api.Proto.ErrorCode error = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Api::Proto::ErrorCode_IsValid(value)) {
            set_error(static_cast< ::Api::Proto::ErrorCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }

      // optional int64 transaction_id = 2;
      case 2: {
        if (tag == 16) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence_id;
        break;
      }

      // optional int64 sequence_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mutations;
        break;
      }

      // repeated .Api.Proto.SrFin.MutationInfo mutations = 4;
      case 4: {
        if (tag == 34) {
         parse_mutations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.SrFin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.SrFin)
  return false;
#undef DO_
}

void SrFin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.SrFin)
  // optional .Api.Proto.ErrorCode error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // optional int64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // optional int64 sequence_id = 3;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sequence_id(), output);
  }

  // repeated .Api.Proto.SrFin.MutationInfo mutations = 4;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->mutations(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.SrFin)
}

int SrFin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.SrFin)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .Api.Proto.ErrorCode error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional int64 transaction_id = 2;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // optional int64 sequence_id = 3;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence_id());
    }

  }
  // repeated .Api.Proto.SrFin.MutationInfo mutations = 4;
  total_size += 1 * this->mutations_size();
  for (int i = 0; i < this->mutations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutations(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrFin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SrFin*>(&from));
}

void SrFin::MergeFrom(const SrFin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.SrFin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mutations_.MergeFrom(from.mutations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SrFin::CopyFrom(const SrFin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.SrFin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrFin::IsInitialized() const {

  return true;
}

void SrFin::Swap(SrFin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrFin::InternalSwap(SrFin* other) {
  std::swap(error_, other->error_);
  std::swap(transaction_id_, other->transaction_id_);
  std::swap(sequence_id_, other->sequence_id_);
  mutations_.UnsafeArenaSwap(&other->mutations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SrFin::GetTypeName() const {
  return "Api.Proto.SrFin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SrFin_MutationInfo

// optional int64 document_id = 1;
bool SrFin_MutationInfo::has_document_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SrFin_MutationInfo::set_has_document_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SrFin_MutationInfo::clear_has_document_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SrFin_MutationInfo::clear_document_id() {
  document_id_ = GOOGLE_LONGLONG(0);
  clear_has_document_id();
}
 ::google::protobuf::int64 SrFin_MutationInfo::document_id() const {
  // @@protoc_insertion_point(field_get:Api.Proto.SrFin.MutationInfo.document_id)
  return document_id_;
}
 void SrFin_MutationInfo::set_document_id(::google::protobuf::int64 value) {
  set_has_document_id();
  document_id_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.SrFin.MutationInfo.document_id)
}

// -------------------------------------------------------------------

// SrFin

// optional .Api.Proto.ErrorCode error = 1;
bool SrFin::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SrFin::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void SrFin::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void SrFin::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::Api::Proto::ErrorCode SrFin::error() const {
  // @@protoc_insertion_point(field_get:Api.Proto.SrFin.error)
  return static_cast< ::Api::Proto::ErrorCode >(error_);
}
 void SrFin::set_error(::Api::Proto::ErrorCode value) {
  assert(::Api::Proto::ErrorCode_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.SrFin.error)
}

// optional int64 transaction_id = 2;
bool SrFin::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SrFin::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SrFin::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SrFin::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 SrFin::transaction_id() const {
  // @@protoc_insertion_point(field_get:Api.Proto.SrFin.transaction_id)
  return transaction_id_;
}
 void SrFin::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.SrFin.transaction_id)
}

// optional int64 sequence_id = 3;
bool SrFin::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SrFin::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SrFin::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SrFin::clear_sequence_id() {
  sequence_id_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_id();
}
 ::google::protobuf::int64 SrFin::sequence_id() const {
  // @@protoc_insertion_point(field_get:Api.Proto.SrFin.sequence_id)
  return sequence_id_;
}
 void SrFin::set_sequence_id(::google::protobuf::int64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:Api.Proto.SrFin.sequence_id)
}

// repeated .Api.Proto.SrFin.MutationInfo mutations = 4;
int SrFin::mutations_size() const {
  return mutations_.size();
}
void SrFin::clear_mutations() {
  mutations_.Clear();
}
const ::Api::Proto::SrFin_MutationInfo& SrFin::mutations(int index) const {
  // @@protoc_insertion_point(field_get:Api.Proto.SrFin.mutations)
  return mutations_.Get(index);
}
::Api::Proto::SrFin_MutationInfo* SrFin::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:Api.Proto.SrFin.mutations)
  return mutations_.Mutable(index);
}
::Api::Proto::SrFin_MutationInfo* SrFin::add_mutations() {
  // @@protoc_insertion_point(field_add:Api.Proto.SrFin.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::Api::Proto::SrFin_MutationInfo >*
SrFin::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:Api.Proto.SrFin.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::Api::Proto::SrFin_MutationInfo >&
SrFin::mutations() const {
  // @@protoc_insertion_point(field_list:Api.Proto.SrFin.mutations)
  return mutations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSrRows(
    SrRows* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrRows::kRowDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrRows::SrRows()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.SrRows)
}

void SrRows::InitAsDefaultInstance() {
}

SrRows::SrRows(const SrRows& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.SrRows)
}

void SrRows::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrRows::~SrRows() {
  // @@protoc_insertion_point(destructor:Api.Proto.SrRows)
  SharedDtor();
}

void SrRows::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SrRows::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SrRows& SrRows::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

SrRows* SrRows::default_instance_ = NULL;

SrRows* SrRows::New(::google::protobuf::Arena* arena) const {
  SrRows* n = new SrRows;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SrRows::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.SrRows)
  row_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SrRows::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSrRows, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.SrRows)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes row_data = 1;
      case 1: {
        if (tag == 10) {
         parse_row_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_row_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_row_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.SrRows)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.SrRows)
  return false;
#undef DO_
}

void SrRows::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.SrRows)
  // repeated bytes row_data = 1;
  for (int i = 0; i < this->row_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->row_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.SrRows)
}

int SrRows::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.SrRows)
  int total_size = 0;

  // repeated bytes row_data = 1;
  total_size += 1 * this->row_data_size();
  for (int i = 0; i < this->row_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->row_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrRows::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SrRows*>(&from));
}

void SrRows::MergeFrom(const SrRows& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.SrRows)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  row_data_.MergeFrom(from.row_data_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SrRows::CopyFrom(const SrRows& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.SrRows)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrRows::IsInitialized() const {

  return true;
}

void SrRows::Swap(SrRows* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrRows::InternalSwap(SrRows* other) {
  row_data_.UnsafeArenaSwap(&other->row_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SrRows::GetTypeName() const {
  return "Api.Proto.SrRows";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SrRows

// repeated bytes row_data = 1;
int SrRows::row_data_size() const {
  return row_data_.size();
}
void SrRows::clear_row_data() {
  row_data_.Clear();
}
 const ::std::string& SrRows::row_data(int index) const {
  // @@protoc_insertion_point(field_get:Api.Proto.SrRows.row_data)
  return row_data_.Get(index);
}
 ::std::string* SrRows::mutable_row_data(int index) {
  // @@protoc_insertion_point(field_mutable:Api.Proto.SrRows.row_data)
  return row_data_.Mutable(index);
}
 void SrRows::set_row_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Api.Proto.SrRows.row_data)
  row_data_.Mutable(index)->assign(value);
}
 void SrRows::set_row_data(int index, const char* value) {
  row_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Api.Proto.SrRows.row_data)
}
 void SrRows::set_row_data(int index, const void* value, size_t size) {
  row_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.SrRows.row_data)
}
 ::std::string* SrRows::add_row_data() {
  // @@protoc_insertion_point(field_add_mutable:Api.Proto.SrRows.row_data)
  return row_data_.Add();
}
 void SrRows::add_row_data(const ::std::string& value) {
  row_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Api.Proto.SrRows.row_data)
}
 void SrRows::add_row_data(const char* value) {
  row_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Api.Proto.SrRows.row_data)
}
 void SrRows::add_row_data(const void* value, size_t size) {
  row_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Api.Proto.SrRows.row_data)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SrRows::row_data() const {
  // @@protoc_insertion_point(field_list:Api.Proto.SrRows.row_data)
  return row_data_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SrRows::mutable_row_data() {
  // @@protoc_insertion_point(field_mutable_list:Api.Proto.SrRows.row_data)
  return &row_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSrBlob(
    SrBlob* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrBlob::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrBlob::SrBlob()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Proto.SrBlob)
}

void SrBlob::InitAsDefaultInstance() {
}

SrBlob::SrBlob(const SrBlob& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Proto.SrBlob)
}

void SrBlob::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrBlob::~SrBlob() {
  // @@protoc_insertion_point(destructor:Api.Proto.SrBlob)
  SharedDtor();
}

void SrBlob::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SrBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SrBlob& SrBlob::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fApi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();
#endif
  return *default_instance_;
}

SrBlob* SrBlob::default_instance_ = NULL;

SrBlob* SrBlob::New(::google::protobuf::Arena* arena) const {
  SrBlob* n = new SrBlob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SrBlob::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Proto.SrBlob)
  if (has_buffer()) {
    buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SrBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSrBlob, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Api.Proto.SrBlob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes buffer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Proto.SrBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Proto.SrBlob)
  return false;
#undef DO_
}

void SrBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Proto.SrBlob)
  // required bytes buffer = 1;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Api.Proto.SrBlob)
}

int SrBlob::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Proto.SrBlob)
  int total_size = 0;

  // required bytes buffer = 1;
  if (has_buffer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buffer());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrBlob::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SrBlob*>(&from));
}

void SrBlob::MergeFrom(const SrBlob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Proto.SrBlob)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffer()) {
      set_has_buffer();
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SrBlob::CopyFrom(const SrBlob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Proto.SrBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrBlob::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SrBlob::Swap(SrBlob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrBlob::InternalSwap(SrBlob* other) {
  buffer_.Swap(&other->buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SrBlob::GetTypeName() const {
  return "Api.Proto.SrBlob";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SrBlob

// required bytes buffer = 1;
bool SrBlob::has_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SrBlob::set_has_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
void SrBlob::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
void SrBlob::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
 const ::std::string& SrBlob::buffer() const {
  // @@protoc_insertion_point(field_get:Api.Proto.SrBlob.buffer)
  return buffer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrBlob::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Proto.SrBlob.buffer)
}
 void SrBlob::set_buffer(const char* value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Proto.SrBlob.buffer)
}
 void SrBlob::set_buffer(const void* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Proto.SrBlob.buffer)
}
 ::std::string* SrBlob::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:Api.Proto.SrBlob.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SrBlob::release_buffer() {
  // @@protoc_insertion_point(field_release:Api.Proto.SrBlob.buffer)
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrBlob::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:Api.Proto.SrBlob.buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api

// @@protoc_insertion_point(global_scope)
