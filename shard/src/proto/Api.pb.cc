// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/Api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Api {
namespace Proto {

void protobuf_ShutdownFile_proto_2fApi_2eproto() {
  delete Update::default_instance_;
  delete CqQuery::default_instance_;
  delete CqShortTransact::default_instance_;
  delete CqCreateStorage::default_instance_;
  delete CqCreateView::default_instance_;
  delete CqUnlinkStorage::default_instance_;
  delete CqUnlinkView::default_instance_;
  delete CqUploadExtern::default_instance_;
  delete CqDownloadExtern::default_instance_;
  delete SrFin::default_instance_;
  delete SrRows::default_instance_;
  delete SrBlob::default_instance_;
}

void protobuf_AddDesc_proto_2fApi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Db::Proto::protobuf_AddDesc_proto_2fConfig_2eproto();
  Update::default_instance_ = new Update();
  CqQuery::default_instance_ = new CqQuery();
  CqShortTransact::default_instance_ = new CqShortTransact();
  CqCreateStorage::default_instance_ = new CqCreateStorage();
  CqCreateView::default_instance_ = new CqCreateView();
  CqUnlinkStorage::default_instance_ = new CqUnlinkStorage();
  CqUnlinkView::default_instance_ = new CqUnlinkView();
  CqUploadExtern::default_instance_ = new CqUploadExtern();
  CqDownloadExtern::default_instance_ = new CqDownloadExtern();
  SrFin::default_instance_ = new SrFin();
  SrRows::default_instance_ = new SrRows();
  SrBlob::default_instance_ = new SrBlob();
  Update::default_instance_->InitAsDefaultInstance();
  CqQuery::default_instance_->InitAsDefaultInstance();
  CqShortTransact::default_instance_->InitAsDefaultInstance();
  CqCreateStorage::default_instance_->InitAsDefaultInstance();
  CqCreateView::default_instance_->InitAsDefaultInstance();
  CqUnlinkStorage::default_instance_->InitAsDefaultInstance();
  CqUnlinkView::default_instance_->InitAsDefaultInstance();
  CqUploadExtern::default_instance_->InitAsDefaultInstance();
  CqDownloadExtern::default_instance_->InitAsDefaultInstance();
  SrFin::default_instance_->InitAsDefaultInstance();
  SrRows::default_instance_->InitAsDefaultInstance();
  SrBlob::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fApi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fApi_2eproto {
  StaticDescriptorInitializer_proto_2fApi_2eproto() {
    protobuf_AddDesc_proto_2fApi_2eproto();
  }
} static_descriptor_initializer_proto_2fApi_2eproto_;

bool Actions_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool ClientRequests_IsValid(int value) {
  switch(value) {
    case 1:
    case 32:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
      return true;
    default:
      return false;
  }
}

bool ServerResponses_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool EnumErrors_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 128:
    case 129:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Update::kActionFieldNumber;
const int Update::kIdFieldNumber;
const int Update::kStorageIdxFieldNumber;
const int Update::kStorageNameFieldNumber;
const int Update::kBufferFieldNumber;
#endif  // !_MSC_VER

Update::Update()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Update::InitAsDefaultInstance() {
}

Update::Update(const Update& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Update::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  storage_idx_ = 0;
  storage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Update::~Update() {
  SharedDtor();
}

void Update::SharedDtor() {
  if (storage_name_ != &::google::protobuf::internal::kEmptyString) {
    delete storage_name_;
  }
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (this != default_instance_) {
  }
}

void Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Update& Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();  return *default_instance_;
}

Update* Update::default_instance_ = NULL;

Update* Update::New() const {
  return new Update;
}

void Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
    id_ = GOOGLE_LONGLONG(0);
    storage_idx_ = 0;
    if (has_storage_name()) {
      if (storage_name_ != &::google::protobuf::internal::kEmptyString) {
        storage_name_->clear();
      }
    }
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::kEmptyString) {
        buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Api.Proto.Actions action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Api::Proto::Actions_IsValid(value)) {
            set_action(static_cast< Api::Proto::Actions >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_storage_idx;
        break;
      }
      
      // optional int32 storage_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storage_idx_)));
          set_has_storage_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_storage_name;
        break;
      }
      
      // optional string storage_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_buffer;
        break;
      }
      
      // optional bytes buffer = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Api.Proto.Actions action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }
  
  // optional int32 storage_idx = 3;
  if (has_storage_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->storage_idx(), output);
  }
  
  // optional string storage_name = 4;
  if (has_storage_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->storage_name(), output);
  }
  
  // optional bytes buffer = 17;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->buffer(), output);
  }
  
}

int Update::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Api.Proto.Actions action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }
    
    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int32 storage_idx = 3;
    if (has_storage_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storage_idx());
    }
    
    // optional string storage_name = 4;
    if (has_storage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage_name());
    }
    
    // optional bytes buffer = 17;
    if (has_buffer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Update::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Update*>(&from));
}

void Update::MergeFrom(const Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_storage_idx()) {
      set_storage_idx(from.storage_idx());
    }
    if (from.has_storage_name()) {
      set_storage_name(from.storage_name());
    }
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
  }
}

void Update::CopyFrom(const Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {
  
  return true;
}

void Update::Swap(Update* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(id_, other->id_);
    std::swap(storage_idx_, other->storage_idx_);
    std::swap(storage_name_, other->storage_name_);
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Update::GetTypeName() const {
  return "Api.Proto.Update";
}


// ===================================================================

#ifndef _MSC_VER
const int CqQuery::kViewNameFieldNumber;
const int CqQuery::kKeysFieldNumber;
const int CqQuery::kFromKeyFieldNumber;
const int CqQuery::kToKeyFieldNumber;
const int CqQuery::kLimitFieldNumber;
#endif  // !_MSC_VER

CqQuery::CqQuery()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CqQuery::InitAsDefaultInstance() {
}

CqQuery::CqQuery(const CqQuery& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CqQuery::SharedCtor() {
  _cached_size_ = 0;
  view_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqQuery::~CqQuery() {
  SharedDtor();
}

void CqQuery::SharedDtor() {
  if (view_name_ != &::google::protobuf::internal::kEmptyString) {
    delete view_name_;
  }
  if (from_key_ != &::google::protobuf::internal::kEmptyString) {
    delete from_key_;
  }
  if (to_key_ != &::google::protobuf::internal::kEmptyString) {
    delete to_key_;
  }
  if (this != default_instance_) {
  }
}

void CqQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqQuery& CqQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();  return *default_instance_;
}

CqQuery* CqQuery::default_instance_ = NULL;

CqQuery* CqQuery::New() const {
  return new CqQuery;
}

void CqQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_view_name()) {
      if (view_name_ != &::google::protobuf::internal::kEmptyString) {
        view_name_->clear();
      }
    }
    if (has_from_key()) {
      if (from_key_ != &::google::protobuf::internal::kEmptyString) {
        from_key_->clear();
      }
    }
    if (has_to_key()) {
      if (to_key_ != &::google::protobuf::internal::kEmptyString) {
        to_key_->clear();
      }
    }
    limit_ = 0u;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CqQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string view_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_view_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }
      
      // repeated bytes keys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectTag(34)) goto parse_from_key;
        break;
      }
      
      // optional bytes from_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_to_key;
        break;
      }
      
      // optional bytes to_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_limit;
        break;
      }
      
      // optional uint32 limit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CqQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string view_name = 2;
  if (has_view_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->view_name(), output);
  }
  
  // repeated bytes keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->keys(i), output);
  }
  
  // optional bytes from_key = 4;
  if (has_from_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->from_key(), output);
  }
  
  // optional bytes to_key = 5;
  if (has_to_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->to_key(), output);
  }
  
  // optional uint32 limit = 6;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->limit(), output);
  }
  
}

int CqQuery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string view_name = 2;
    if (has_view_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->view_name());
    }
    
    // optional bytes from_key = 4;
    if (has_from_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from_key());
    }
    
    // optional bytes to_key = 5;
    if (has_to_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to_key());
    }
    
    // optional uint32 limit = 6;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }
    
  }
  // repeated bytes keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqQuery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqQuery*>(&from));
}

void CqQuery::MergeFrom(const CqQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_view_name()) {
      set_view_name(from.view_name());
    }
    if (from.has_from_key()) {
      set_from_key(from.from_key());
    }
    if (from.has_to_key()) {
      set_to_key(from.to_key());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
}

void CqQuery::CopyFrom(const CqQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqQuery::IsInitialized() const {
  
  return true;
}

void CqQuery::Swap(CqQuery* other) {
  if (other != this) {
    std::swap(view_name_, other->view_name_);
    keys_.Swap(&other->keys_);
    std::swap(from_key_, other->from_key_);
    std::swap(to_key_, other->to_key_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CqQuery::GetTypeName() const {
  return "Api.Proto.CqQuery";
}


// ===================================================================

#ifndef _MSC_VER
const int CqShortTransact::kUpdatesFieldNumber;
#endif  // !_MSC_VER

CqShortTransact::CqShortTransact()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CqShortTransact::InitAsDefaultInstance() {
}

CqShortTransact::CqShortTransact(const CqShortTransact& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CqShortTransact::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqShortTransact::~CqShortTransact() {
  SharedDtor();
}

void CqShortTransact::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CqShortTransact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqShortTransact& CqShortTransact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();  return *default_instance_;
}

CqShortTransact* CqShortTransact::default_instance_ = NULL;

CqShortTransact* CqShortTransact::New() const {
  return new CqShortTransact;
}

void CqShortTransact::Clear() {
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CqShortTransact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Api.Proto.Update updates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_updates;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CqShortTransact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Api.Proto.Update updates = 2;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->updates(i), output);
  }
  
}

int CqShortTransact::ByteSize() const {
  int total_size = 0;
  
  // repeated .Api.Proto.Update updates = 2;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqShortTransact::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqShortTransact*>(&from));
}

void CqShortTransact::MergeFrom(const CqShortTransact& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
}

void CqShortTransact::CopyFrom(const CqShortTransact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqShortTransact::IsInitialized() const {
  
  return true;
}

void CqShortTransact::Swap(CqShortTransact* other) {
  if (other != this) {
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CqShortTransact::GetTypeName() const {
  return "Api.Proto.CqShortTransact";
}


// ===================================================================

#ifndef _MSC_VER
const int CqCreateStorage::kConfigFieldNumber;
#endif  // !_MSC_VER

CqCreateStorage::CqCreateStorage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CqCreateStorage::InitAsDefaultInstance() {
  config_ = const_cast< ::Db::Proto::StorageConfig*>(&::Db::Proto::StorageConfig::default_instance());
}

CqCreateStorage::CqCreateStorage(const CqCreateStorage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CqCreateStorage::SharedCtor() {
  _cached_size_ = 0;
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqCreateStorage::~CqCreateStorage() {
  SharedDtor();
}

void CqCreateStorage::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
  }
}

void CqCreateStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqCreateStorage& CqCreateStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();  return *default_instance_;
}

CqCreateStorage* CqCreateStorage::default_instance_ = NULL;

CqCreateStorage* CqCreateStorage::New() const {
  return new CqCreateStorage;
}

void CqCreateStorage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_config()) {
      if (config_ != NULL) config_->::Db::Proto::StorageConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CqCreateStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Db.Proto.StorageConfig config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CqCreateStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Db.Proto.StorageConfig config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->config(), output);
  }
  
}

int CqCreateStorage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Db.Proto.StorageConfig config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqCreateStorage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqCreateStorage*>(&from));
}

void CqCreateStorage::MergeFrom(const CqCreateStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      mutable_config()->::Db::Proto::StorageConfig::MergeFrom(from.config());
    }
  }
}

void CqCreateStorage::CopyFrom(const CqCreateStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqCreateStorage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_config()) {
    if (!this->config().IsInitialized()) return false;
  }
  return true;
}

void CqCreateStorage::Swap(CqCreateStorage* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CqCreateStorage::GetTypeName() const {
  return "Api.Proto.CqCreateStorage";
}


// ===================================================================

#ifndef _MSC_VER
const int CqCreateView::kConfigFieldNumber;
#endif  // !_MSC_VER

CqCreateView::CqCreateView()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CqCreateView::InitAsDefaultInstance() {
  config_ = const_cast< ::Db::Proto::ViewConfig*>(&::Db::Proto::ViewConfig::default_instance());
}

CqCreateView::CqCreateView(const CqCreateView& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CqCreateView::SharedCtor() {
  _cached_size_ = 0;
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqCreateView::~CqCreateView() {
  SharedDtor();
}

void CqCreateView::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
  }
}

void CqCreateView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqCreateView& CqCreateView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();  return *default_instance_;
}

CqCreateView* CqCreateView::default_instance_ = NULL;

CqCreateView* CqCreateView::New() const {
  return new CqCreateView;
}

void CqCreateView::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_config()) {
      if (config_ != NULL) config_->::Db::Proto::ViewConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CqCreateView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Db.Proto.ViewConfig config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CqCreateView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Db.Proto.ViewConfig config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->config(), output);
  }
  
}

int CqCreateView::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Db.Proto.ViewConfig config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqCreateView::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqCreateView*>(&from));
}

void CqCreateView::MergeFrom(const CqCreateView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      mutable_config()->::Db::Proto::ViewConfig::MergeFrom(from.config());
    }
  }
}

void CqCreateView::CopyFrom(const CqCreateView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqCreateView::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_config()) {
    if (!this->config().IsInitialized()) return false;
  }
  return true;
}

void CqCreateView::Swap(CqCreateView* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CqCreateView::GetTypeName() const {
  return "Api.Proto.CqCreateView";
}


// ===================================================================

#ifndef _MSC_VER
const int CqUnlinkStorage::kIdentifierFieldNumber;
#endif  // !_MSC_VER

CqUnlinkStorage::CqUnlinkStorage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CqUnlinkStorage::InitAsDefaultInstance() {
}

CqUnlinkStorage::CqUnlinkStorage(const CqUnlinkStorage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CqUnlinkStorage::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqUnlinkStorage::~CqUnlinkStorage() {
  SharedDtor();
}

void CqUnlinkStorage::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
  }
}

void CqUnlinkStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqUnlinkStorage& CqUnlinkStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();  return *default_instance_;
}

CqUnlinkStorage* CqUnlinkStorage::default_instance_ = NULL;

CqUnlinkStorage* CqUnlinkStorage::New() const {
  return new CqUnlinkStorage;
}

void CqUnlinkStorage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CqUnlinkStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CqUnlinkStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->identifier(), output);
  }
  
}

int CqUnlinkStorage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqUnlinkStorage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqUnlinkStorage*>(&from));
}

void CqUnlinkStorage::MergeFrom(const CqUnlinkStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
  }
}

void CqUnlinkStorage::CopyFrom(const CqUnlinkStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqUnlinkStorage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CqUnlinkStorage::Swap(CqUnlinkStorage* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CqUnlinkStorage::GetTypeName() const {
  return "Api.Proto.CqUnlinkStorage";
}


// ===================================================================

#ifndef _MSC_VER
const int CqUnlinkView::kIdentifierFieldNumber;
#endif  // !_MSC_VER

CqUnlinkView::CqUnlinkView()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CqUnlinkView::InitAsDefaultInstance() {
}

CqUnlinkView::CqUnlinkView(const CqUnlinkView& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CqUnlinkView::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqUnlinkView::~CqUnlinkView() {
  SharedDtor();
}

void CqUnlinkView::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
  }
}

void CqUnlinkView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqUnlinkView& CqUnlinkView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();  return *default_instance_;
}

CqUnlinkView* CqUnlinkView::default_instance_ = NULL;

CqUnlinkView* CqUnlinkView::New() const {
  return new CqUnlinkView;
}

void CqUnlinkView::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CqUnlinkView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CqUnlinkView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->identifier(), output);
  }
  
}

int CqUnlinkView::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqUnlinkView::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqUnlinkView*>(&from));
}

void CqUnlinkView::MergeFrom(const CqUnlinkView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
  }
}

void CqUnlinkView::CopyFrom(const CqUnlinkView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqUnlinkView::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CqUnlinkView::Swap(CqUnlinkView* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CqUnlinkView::GetTypeName() const {
  return "Api.Proto.CqUnlinkView";
}


// ===================================================================

#ifndef _MSC_VER
const int CqUploadExtern::kFileNameFieldNumber;
const int CqUploadExtern::kBufferFieldNumber;
#endif  // !_MSC_VER

CqUploadExtern::CqUploadExtern()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CqUploadExtern::InitAsDefaultInstance() {
}

CqUploadExtern::CqUploadExtern(const CqUploadExtern& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CqUploadExtern::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqUploadExtern::~CqUploadExtern() {
  SharedDtor();
}

void CqUploadExtern::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (this != default_instance_) {
  }
}

void CqUploadExtern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqUploadExtern& CqUploadExtern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();  return *default_instance_;
}

CqUploadExtern* CqUploadExtern::default_instance_ = NULL;

CqUploadExtern* CqUploadExtern::New() const {
  return new CqUploadExtern;
}

void CqUploadExtern::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::kEmptyString) {
        buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CqUploadExtern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buffer;
        break;
      }
      
      // required bytes buffer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CqUploadExtern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_name(), output);
  }
  
  // required bytes buffer = 2;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->buffer(), output);
  }
  
}

int CqUploadExtern::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }
    
    // required bytes buffer = 2;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqUploadExtern::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqUploadExtern*>(&from));
}

void CqUploadExtern::MergeFrom(const CqUploadExtern& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
  }
}

void CqUploadExtern::CopyFrom(const CqUploadExtern& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqUploadExtern::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CqUploadExtern::Swap(CqUploadExtern* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CqUploadExtern::GetTypeName() const {
  return "Api.Proto.CqUploadExtern";
}


// ===================================================================

#ifndef _MSC_VER
const int CqDownloadExtern::kFileNameFieldNumber;
#endif  // !_MSC_VER

CqDownloadExtern::CqDownloadExtern()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CqDownloadExtern::InitAsDefaultInstance() {
}

CqDownloadExtern::CqDownloadExtern(const CqDownloadExtern& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CqDownloadExtern::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CqDownloadExtern::~CqDownloadExtern() {
  SharedDtor();
}

void CqDownloadExtern::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void CqDownloadExtern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CqDownloadExtern& CqDownloadExtern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();  return *default_instance_;
}

CqDownloadExtern* CqDownloadExtern::default_instance_ = NULL;

CqDownloadExtern* CqDownloadExtern::New() const {
  return new CqDownloadExtern;
}

void CqDownloadExtern::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CqDownloadExtern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CqDownloadExtern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_name(), output);
  }
  
}

int CqDownloadExtern::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CqDownloadExtern::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CqDownloadExtern*>(&from));
}

void CqDownloadExtern::MergeFrom(const CqDownloadExtern& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
}

void CqDownloadExtern::CopyFrom(const CqDownloadExtern& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CqDownloadExtern::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CqDownloadExtern::Swap(CqDownloadExtern* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CqDownloadExtern::GetTypeName() const {
  return "Api.Proto.CqDownloadExtern";
}


// ===================================================================

#ifndef _MSC_VER
const int SrFin::kSuccessFieldNumber;
const int SrFin::kErrCodeFieldNumber;
const int SrFin::kErrMsgFieldNumber;
#endif  // !_MSC_VER

SrFin::SrFin()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SrFin::InitAsDefaultInstance() {
}

SrFin::SrFin(const SrFin& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SrFin::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  err_code_ = 0;
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrFin::~SrFin() {
  SharedDtor();
}

void SrFin::SharedDtor() {
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  if (this != default_instance_) {
  }
}

void SrFin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SrFin& SrFin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();  return *default_instance_;
}

SrFin* SrFin::default_instance_ = NULL;

SrFin* SrFin::New() const {
  return new SrFin;
}

void SrFin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    err_code_ = 0;
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
        err_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SrFin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_code;
        break;
      }
      
      // optional .Api.Proto.EnumErrors err_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Api::Proto::EnumErrors_IsValid(value)) {
            set_err_code(static_cast< Api::Proto::EnumErrors >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_err_msg;
        break;
      }
      
      // optional string err_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrFin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // optional .Api.Proto.EnumErrors err_code = 2;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->err_code(), output);
  }
  
  // optional string err_msg = 3;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->err_msg(), output);
  }
  
}

int SrFin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // optional .Api.Proto.EnumErrors err_code = 2;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->err_code());
    }
    
    // optional string err_msg = 3;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_msg());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrFin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SrFin*>(&from));
}

void SrFin::MergeFrom(const SrFin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
  }
}

void SrFin::CopyFrom(const SrFin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrFin::IsInitialized() const {
  
  return true;
}

void SrFin::Swap(SrFin* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(err_code_, other->err_code_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SrFin::GetTypeName() const {
  return "Api.Proto.SrFin";
}


// ===================================================================

#ifndef _MSC_VER
const int SrRows::kRowDataFieldNumber;
#endif  // !_MSC_VER

SrRows::SrRows()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SrRows::InitAsDefaultInstance() {
}

SrRows::SrRows(const SrRows& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SrRows::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrRows::~SrRows() {
  SharedDtor();
}

void SrRows::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SrRows::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SrRows& SrRows::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();  return *default_instance_;
}

SrRows* SrRows::default_instance_ = NULL;

SrRows* SrRows::New() const {
  return new SrRows;
}

void SrRows::Clear() {
  row_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SrRows::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes row_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_row_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_row_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrRows::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes row_data = 1;
  for (int i = 0; i < this->row_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->row_data(i), output);
  }
  
}

int SrRows::ByteSize() const {
  int total_size = 0;
  
  // repeated bytes row_data = 1;
  total_size += 1 * this->row_data_size();
  for (int i = 0; i < this->row_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->row_data(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrRows::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SrRows*>(&from));
}

void SrRows::MergeFrom(const SrRows& from) {
  GOOGLE_CHECK_NE(&from, this);
  row_data_.MergeFrom(from.row_data_);
}

void SrRows::CopyFrom(const SrRows& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrRows::IsInitialized() const {
  
  return true;
}

void SrRows::Swap(SrRows* other) {
  if (other != this) {
    row_data_.Swap(&other->row_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SrRows::GetTypeName() const {
  return "Api.Proto.SrRows";
}


// ===================================================================

#ifndef _MSC_VER
const int SrBlob::kBufferFieldNumber;
#endif  // !_MSC_VER

SrBlob::SrBlob()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SrBlob::InitAsDefaultInstance() {
}

SrBlob::SrBlob(const SrBlob& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SrBlob::SharedCtor() {
  _cached_size_ = 0;
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrBlob::~SrBlob() {
  SharedDtor();
}

void SrBlob::SharedDtor() {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (this != default_instance_) {
  }
}

void SrBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SrBlob& SrBlob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fApi_2eproto();  return *default_instance_;
}

SrBlob* SrBlob::default_instance_ = NULL;

SrBlob* SrBlob::New() const {
  return new SrBlob;
}

void SrBlob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::kEmptyString) {
        buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SrBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes buffer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes buffer = 1;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->buffer(), output);
  }
  
}

int SrBlob::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes buffer = 1;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrBlob::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SrBlob*>(&from));
}

void SrBlob::MergeFrom(const SrBlob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
  }
}

void SrBlob::CopyFrom(const SrBlob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrBlob::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SrBlob::Swap(SrBlob* other) {
  if (other != this) {
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SrBlob::GetTypeName() const {
  return "Api.Proto.SrBlob";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api

// @@protoc_insertion_point(global_scope)
