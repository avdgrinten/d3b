// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/Config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace Db {
namespace Proto {

void protobuf_ShutdownFile_proto_2fConfig_2eproto() {
  delete Config::default_instance_;
  delete StorageDescriptor::default_instance_;
  delete ViewDescriptor::default_instance_;
  delete StorageConfig::default_instance_;
  delete ViewConfig::default_instance_;
  delete LogMutation::default_instance_;
  delete LogEntry::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_proto_2fConfig_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_proto_2fConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Config::default_instance_ = new Config();
  StorageDescriptor::default_instance_ = new StorageDescriptor();
  ViewDescriptor::default_instance_ = new ViewDescriptor();
  StorageConfig::default_instance_ = new StorageConfig();
  ViewConfig::default_instance_ = new ViewConfig();
  LogMutation::default_instance_ = new LogMutation();
  LogEntry::default_instance_ = new LogEntry();
  Config::default_instance_->InitAsDefaultInstance();
  StorageDescriptor::default_instance_->InitAsDefaultInstance();
  ViewDescriptor::default_instance_->InitAsDefaultInstance();
  StorageConfig::default_instance_->InitAsDefaultInstance();
  ViewConfig::default_instance_->InitAsDefaultInstance();
  LogMutation::default_instance_->InitAsDefaultInstance();
  LogEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fConfig_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_proto_2fConfig_2eproto_once_);
void protobuf_AddDesc_proto_2fConfig_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_proto_2fConfig_2eproto_once_,
                 &protobuf_AddDesc_proto_2fConfig_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fConfig_2eproto {
  StaticDescriptorInitializer_proto_2fConfig_2eproto() {
    protobuf_AddDesc_proto_2fConfig_2eproto();
  }
} static_descriptor_initializer_proto_2fConfig_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForConfig(
    Config* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kStoragesFieldNumber;
const int Config::kViewsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Db.Proto.Config)
}

void Config::InitAsDefaultInstance() {
}

Config::Config(const Config& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Db.Proto.Config)
}

void Config::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:Db.Proto.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Config& Config::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fConfig_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();
#endif
  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New(::google::protobuf::Arena* arena) const {
  Config* n = new Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.Proto.Config)
  storages_.Clear();
  views_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForConfig, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Db.Proto.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string storages = 1;
      case 1: {
        if (tag == 10) {
         parse_storages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_storages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_storages;
        if (input->ExpectTag(18)) goto parse_views;
        break;
      }

      // repeated string views = 2;
      case 2: {
        if (tag == 18) {
         parse_views:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_views()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_views;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Db.Proto.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Db.Proto.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Db.Proto.Config)
  // repeated string storages = 1;
  for (int i = 0; i < this->storages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->storages(i), output);
  }

  // repeated string views = 2;
  for (int i = 0; i < this->views_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->views(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Db.Proto.Config)
}

int Config::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Db.Proto.Config)
  int total_size = 0;

  // repeated string storages = 1;
  total_size += 1 * this->storages_size();
  for (int i = 0; i < this->storages_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->storages(i));
  }

  // repeated string views = 2;
  total_size += 1 * this->views_size();
  for (int i = 0; i < this->views_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->views(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Config*>(&from));
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Db.Proto.Config)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  storages_.MergeFrom(from.storages_);
  views_.MergeFrom(from.views_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.Proto.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {

  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  storages_.UnsafeArenaSwap(&other->storages_);
  views_.UnsafeArenaSwap(&other->views_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Config::GetTypeName() const {
  return "Db.Proto.Config";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Config

// repeated string storages = 1;
int Config::storages_size() const {
  return storages_.size();
}
void Config::clear_storages() {
  storages_.Clear();
}
 const ::std::string& Config::storages(int index) const {
  // @@protoc_insertion_point(field_get:Db.Proto.Config.storages)
  return storages_.Get(index);
}
 ::std::string* Config::mutable_storages(int index) {
  // @@protoc_insertion_point(field_mutable:Db.Proto.Config.storages)
  return storages_.Mutable(index);
}
 void Config::set_storages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Db.Proto.Config.storages)
  storages_.Mutable(index)->assign(value);
}
 void Config::set_storages(int index, const char* value) {
  storages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Db.Proto.Config.storages)
}
 void Config::set_storages(int index, const char* value, size_t size) {
  storages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.Config.storages)
}
 ::std::string* Config::add_storages() {
  // @@protoc_insertion_point(field_add_mutable:Db.Proto.Config.storages)
  return storages_.Add();
}
 void Config::add_storages(const ::std::string& value) {
  storages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Db.Proto.Config.storages)
}
 void Config::add_storages(const char* value) {
  storages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Db.Proto.Config.storages)
}
 void Config::add_storages(const char* value, size_t size) {
  storages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Db.Proto.Config.storages)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config::storages() const {
  // @@protoc_insertion_point(field_list:Db.Proto.Config.storages)
  return storages_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Config::mutable_storages() {
  // @@protoc_insertion_point(field_mutable_list:Db.Proto.Config.storages)
  return &storages_;
}

// repeated string views = 2;
int Config::views_size() const {
  return views_.size();
}
void Config::clear_views() {
  views_.Clear();
}
 const ::std::string& Config::views(int index) const {
  // @@protoc_insertion_point(field_get:Db.Proto.Config.views)
  return views_.Get(index);
}
 ::std::string* Config::mutable_views(int index) {
  // @@protoc_insertion_point(field_mutable:Db.Proto.Config.views)
  return views_.Mutable(index);
}
 void Config::set_views(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Db.Proto.Config.views)
  views_.Mutable(index)->assign(value);
}
 void Config::set_views(int index, const char* value) {
  views_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Db.Proto.Config.views)
}
 void Config::set_views(int index, const char* value, size_t size) {
  views_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.Config.views)
}
 ::std::string* Config::add_views() {
  // @@protoc_insertion_point(field_add_mutable:Db.Proto.Config.views)
  return views_.Add();
}
 void Config::add_views(const ::std::string& value) {
  views_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Db.Proto.Config.views)
}
 void Config::add_views(const char* value) {
  views_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Db.Proto.Config.views)
}
 void Config::add_views(const char* value, size_t size) {
  views_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Db.Proto.Config.views)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config::views() const {
  // @@protoc_insertion_point(field_list:Db.Proto.Config.views)
  return views_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Config::mutable_views() {
  // @@protoc_insertion_point(field_mutable_list:Db.Proto.Config.views)
  return &views_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForStorageDescriptor(
    StorageDescriptor* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageDescriptor::kDriverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageDescriptor::StorageDescriptor()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Db.Proto.StorageDescriptor)
}

void StorageDescriptor::InitAsDefaultInstance() {
}

StorageDescriptor::StorageDescriptor(const StorageDescriptor& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Db.Proto.StorageDescriptor)
}

void StorageDescriptor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageDescriptor::~StorageDescriptor() {
  // @@protoc_insertion_point(destructor:Db.Proto.StorageDescriptor)
  SharedDtor();
}

void StorageDescriptor::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StorageDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StorageDescriptor& StorageDescriptor::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fConfig_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();
#endif
  return *default_instance_;
}

StorageDescriptor* StorageDescriptor::default_instance_ = NULL;

StorageDescriptor* StorageDescriptor::New(::google::protobuf::Arena* arena) const {
  StorageDescriptor* n = new StorageDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.Proto.StorageDescriptor)
  if (has_driver()) {
    driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StorageDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForStorageDescriptor, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Db.Proto.StorageDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string driver = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Db.Proto.StorageDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Db.Proto.StorageDescriptor)
  return false;
#undef DO_
}

void StorageDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Db.Proto.StorageDescriptor)
  // required string driver = 1;
  if (has_driver()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->driver(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Db.Proto.StorageDescriptor)
}

int StorageDescriptor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Db.Proto.StorageDescriptor)
  int total_size = 0;

  // required string driver = 1;
  if (has_driver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->driver());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StorageDescriptor*>(&from));
}

void StorageDescriptor::MergeFrom(const StorageDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Db.Proto.StorageDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_driver()) {
      set_has_driver();
      driver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void StorageDescriptor::CopyFrom(const StorageDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.Proto.StorageDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StorageDescriptor::Swap(StorageDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageDescriptor::InternalSwap(StorageDescriptor* other) {
  driver_.Swap(&other->driver_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StorageDescriptor::GetTypeName() const {
  return "Db.Proto.StorageDescriptor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageDescriptor

// required string driver = 1;
bool StorageDescriptor::has_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StorageDescriptor::set_has_driver() {
  _has_bits_[0] |= 0x00000001u;
}
void StorageDescriptor::clear_has_driver() {
  _has_bits_[0] &= ~0x00000001u;
}
void StorageDescriptor::clear_driver() {
  driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_driver();
}
 const ::std::string& StorageDescriptor::driver() const {
  // @@protoc_insertion_point(field_get:Db.Proto.StorageDescriptor.driver)
  return driver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StorageDescriptor::set_driver(const ::std::string& value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Db.Proto.StorageDescriptor.driver)
}
 void StorageDescriptor::set_driver(const char* value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Db.Proto.StorageDescriptor.driver)
}
 void StorageDescriptor::set_driver(const char* value, size_t size) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.StorageDescriptor.driver)
}
 ::std::string* StorageDescriptor::mutable_driver() {
  set_has_driver();
  // @@protoc_insertion_point(field_mutable:Db.Proto.StorageDescriptor.driver)
  return driver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StorageDescriptor::release_driver() {
  // @@protoc_insertion_point(field_release:Db.Proto.StorageDescriptor.driver)
  clear_has_driver();
  return driver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StorageDescriptor::set_allocated_driver(::std::string* driver) {
  if (driver != NULL) {
    set_has_driver();
  } else {
    clear_has_driver();
  }
  driver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:Db.Proto.StorageDescriptor.driver)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForViewDescriptor(
    ViewDescriptor* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewDescriptor::kDriverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewDescriptor::ViewDescriptor()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Db.Proto.ViewDescriptor)
}

void ViewDescriptor::InitAsDefaultInstance() {
}

ViewDescriptor::ViewDescriptor(const ViewDescriptor& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Db.Proto.ViewDescriptor)
}

void ViewDescriptor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewDescriptor::~ViewDescriptor() {
  // @@protoc_insertion_point(destructor:Db.Proto.ViewDescriptor)
  SharedDtor();
}

void ViewDescriptor::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ViewDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ViewDescriptor& ViewDescriptor::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fConfig_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();
#endif
  return *default_instance_;
}

ViewDescriptor* ViewDescriptor::default_instance_ = NULL;

ViewDescriptor* ViewDescriptor::New(::google::protobuf::Arena* arena) const {
  ViewDescriptor* n = new ViewDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ViewDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.Proto.ViewDescriptor)
  if (has_driver()) {
    driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ViewDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForViewDescriptor, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Db.Proto.ViewDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string driver = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Db.Proto.ViewDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Db.Proto.ViewDescriptor)
  return false;
#undef DO_
}

void ViewDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Db.Proto.ViewDescriptor)
  // required string driver = 1;
  if (has_driver()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->driver(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Db.Proto.ViewDescriptor)
}

int ViewDescriptor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Db.Proto.ViewDescriptor)
  int total_size = 0;

  // required string driver = 1;
  if (has_driver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->driver());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ViewDescriptor*>(&from));
}

void ViewDescriptor::MergeFrom(const ViewDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Db.Proto.ViewDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_driver()) {
      set_has_driver();
      driver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ViewDescriptor::CopyFrom(const ViewDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.Proto.ViewDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ViewDescriptor::Swap(ViewDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewDescriptor::InternalSwap(ViewDescriptor* other) {
  driver_.Swap(&other->driver_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ViewDescriptor::GetTypeName() const {
  return "Db.Proto.ViewDescriptor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ViewDescriptor

// required string driver = 1;
bool ViewDescriptor::has_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ViewDescriptor::set_has_driver() {
  _has_bits_[0] |= 0x00000001u;
}
void ViewDescriptor::clear_has_driver() {
  _has_bits_[0] &= ~0x00000001u;
}
void ViewDescriptor::clear_driver() {
  driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_driver();
}
 const ::std::string& ViewDescriptor::driver() const {
  // @@protoc_insertion_point(field_get:Db.Proto.ViewDescriptor.driver)
  return driver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ViewDescriptor::set_driver(const ::std::string& value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Db.Proto.ViewDescriptor.driver)
}
 void ViewDescriptor::set_driver(const char* value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Db.Proto.ViewDescriptor.driver)
}
 void ViewDescriptor::set_driver(const char* value, size_t size) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.ViewDescriptor.driver)
}
 ::std::string* ViewDescriptor::mutable_driver() {
  set_has_driver();
  // @@protoc_insertion_point(field_mutable:Db.Proto.ViewDescriptor.driver)
  return driver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ViewDescriptor::release_driver() {
  // @@protoc_insertion_point(field_release:Db.Proto.ViewDescriptor.driver)
  clear_has_driver();
  return driver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ViewDescriptor::set_allocated_driver(::std::string* driver) {
  if (driver != NULL) {
    set_has_driver();
  } else {
    clear_has_driver();
  }
  driver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:Db.Proto.ViewDescriptor.driver)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForStorageConfig(
    StorageConfig* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageConfig::StorageConfig()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Db.Proto.StorageConfig)
}

void StorageConfig::InitAsDefaultInstance() {
}

StorageConfig::StorageConfig(const StorageConfig& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Db.Proto.StorageConfig)
}

void StorageConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageConfig::~StorageConfig() {
  // @@protoc_insertion_point(destructor:Db.Proto.StorageConfig)
  SharedDtor();
}

void StorageConfig::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StorageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StorageConfig& StorageConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fConfig_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();
#endif
  return *default_instance_;
}

StorageConfig* StorageConfig::default_instance_ = NULL;

StorageConfig* StorageConfig::New(::google::protobuf::Arena* arena) const {
  StorageConfig* n = new StorageConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.Proto.StorageConfig)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForStorageConfig, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Db.Proto.StorageConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Db.Proto.StorageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Db.Proto.StorageConfig)
  return false;
#undef DO_
}

void StorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Db.Proto.StorageConfig)
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Db.Proto.StorageConfig)
}

int StorageConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Db.Proto.StorageConfig)
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StorageConfig*>(&from));
}

void StorageConfig::MergeFrom(const StorageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Db.Proto.StorageConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void StorageConfig::CopyFrom(const StorageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.Proto.StorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageConfig::IsInitialized() const {

  return true;
}

void StorageConfig::Swap(StorageConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageConfig::InternalSwap(StorageConfig* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StorageConfig::GetTypeName() const {
  return "Db.Proto.StorageConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageConfig

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForViewConfig(
    ViewConfig* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewConfig::kBaseStorageFieldNumber;
const int ViewConfig::kScriptFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewConfig::ViewConfig()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Db.Proto.ViewConfig)
}

void ViewConfig::InitAsDefaultInstance() {
}

ViewConfig::ViewConfig(const ViewConfig& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Db.Proto.ViewConfig)
}

void ViewConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_storage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewConfig::~ViewConfig() {
  // @@protoc_insertion_point(destructor:Db.Proto.ViewConfig)
  SharedDtor();
}

void ViewConfig::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_storage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ViewConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ViewConfig& ViewConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fConfig_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();
#endif
  return *default_instance_;
}

ViewConfig* ViewConfig::default_instance_ = NULL;

ViewConfig* ViewConfig::New(::google::protobuf::Arena* arena) const {
  ViewConfig* n = new ViewConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ViewConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.Proto.ViewConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_base_storage()) {
      base_storage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_script_file()) {
      script_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ViewConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForViewConfig, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Db.Proto.ViewConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string base_storage = 128;
      case 128: {
        if (tag == 1026) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_storage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1034)) goto parse_script_file;
        break;
      }

      // optional string script_file = 129;
      case 129: {
        if (tag == 1034) {
         parse_script_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Db.Proto.ViewConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Db.Proto.ViewConfig)
  return false;
#undef DO_
}

void ViewConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Db.Proto.ViewConfig)
  // optional string base_storage = 128;
  if (has_base_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      128, this->base_storage(), output);
  }

  // optional string script_file = 129;
  if (has_script_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      129, this->script_file(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Db.Proto.ViewConfig)
}

int ViewConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Db.Proto.ViewConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string base_storage = 128;
    if (has_base_storage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_storage());
    }

    // optional string script_file = 129;
    if (has_script_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script_file());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ViewConfig*>(&from));
}

void ViewConfig::MergeFrom(const ViewConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Db.Proto.ViewConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_storage()) {
      set_has_base_storage();
      base_storage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_storage_);
    }
    if (from.has_script_file()) {
      set_has_script_file();
      script_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_file_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ViewConfig::CopyFrom(const ViewConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.Proto.ViewConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewConfig::IsInitialized() const {

  return true;
}

void ViewConfig::Swap(ViewConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewConfig::InternalSwap(ViewConfig* other) {
  base_storage_.Swap(&other->base_storage_);
  script_file_.Swap(&other->script_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ViewConfig::GetTypeName() const {
  return "Db.Proto.ViewConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ViewConfig

// optional string base_storage = 128;
bool ViewConfig::has_base_storage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ViewConfig::set_has_base_storage() {
  _has_bits_[0] |= 0x00000001u;
}
void ViewConfig::clear_has_base_storage() {
  _has_bits_[0] &= ~0x00000001u;
}
void ViewConfig::clear_base_storage() {
  base_storage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base_storage();
}
 const ::std::string& ViewConfig::base_storage() const {
  // @@protoc_insertion_point(field_get:Db.Proto.ViewConfig.base_storage)
  return base_storage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ViewConfig::set_base_storage(const ::std::string& value) {
  set_has_base_storage();
  base_storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Db.Proto.ViewConfig.base_storage)
}
 void ViewConfig::set_base_storage(const char* value) {
  set_has_base_storage();
  base_storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Db.Proto.ViewConfig.base_storage)
}
 void ViewConfig::set_base_storage(const char* value, size_t size) {
  set_has_base_storage();
  base_storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.ViewConfig.base_storage)
}
 ::std::string* ViewConfig::mutable_base_storage() {
  set_has_base_storage();
  // @@protoc_insertion_point(field_mutable:Db.Proto.ViewConfig.base_storage)
  return base_storage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ViewConfig::release_base_storage() {
  // @@protoc_insertion_point(field_release:Db.Proto.ViewConfig.base_storage)
  clear_has_base_storage();
  return base_storage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ViewConfig::set_allocated_base_storage(::std::string* base_storage) {
  if (base_storage != NULL) {
    set_has_base_storage();
  } else {
    clear_has_base_storage();
  }
  base_storage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_storage);
  // @@protoc_insertion_point(field_set_allocated:Db.Proto.ViewConfig.base_storage)
}

// optional string script_file = 129;
bool ViewConfig::has_script_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ViewConfig::set_has_script_file() {
  _has_bits_[0] |= 0x00000002u;
}
void ViewConfig::clear_has_script_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void ViewConfig::clear_script_file() {
  script_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_script_file();
}
 const ::std::string& ViewConfig::script_file() const {
  // @@protoc_insertion_point(field_get:Db.Proto.ViewConfig.script_file)
  return script_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ViewConfig::set_script_file(const ::std::string& value) {
  set_has_script_file();
  script_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Db.Proto.ViewConfig.script_file)
}
 void ViewConfig::set_script_file(const char* value) {
  set_has_script_file();
  script_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Db.Proto.ViewConfig.script_file)
}
 void ViewConfig::set_script_file(const char* value, size_t size) {
  set_has_script_file();
  script_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.ViewConfig.script_file)
}
 ::std::string* ViewConfig::mutable_script_file() {
  set_has_script_file();
  // @@protoc_insertion_point(field_mutable:Db.Proto.ViewConfig.script_file)
  return script_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ViewConfig::release_script_file() {
  // @@protoc_insertion_point(field_release:Db.Proto.ViewConfig.script_file)
  clear_has_script_file();
  return script_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ViewConfig::set_allocated_script_file(::std::string* script_file) {
  if (script_file != NULL) {
    set_has_script_file();
  } else {
    clear_has_script_file();
  }
  script_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_file);
  // @@protoc_insertion_point(field_set_allocated:Db.Proto.ViewConfig.script_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForLogMutation(
    LogMutation* ptr) {
  return ptr->mutable_unknown_fields();
}

bool LogMutation_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LogMutation_Type LogMutation::kTypeNone;
const LogMutation_Type LogMutation::kTypeInsert;
const LogMutation_Type LogMutation::kTypeModify;
const LogMutation_Type LogMutation::Type_MIN;
const LogMutation_Type LogMutation::Type_MAX;
const int LogMutation::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMutation::kTypeFieldNumber;
const int LogMutation::kStorageNameFieldNumber;
const int LogMutation::kDocumentIdFieldNumber;
const int LogMutation::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMutation::LogMutation()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Db.Proto.LogMutation)
}

void LogMutation::InitAsDefaultInstance() {
}

LogMutation::LogMutation(const LogMutation& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Db.Proto.LogMutation)
}

void LogMutation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  storage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_id_ = GOOGLE_LONGLONG(0);
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMutation::~LogMutation() {
  // @@protoc_insertion_point(destructor:Db.Proto.LogMutation)
  SharedDtor();
}

void LogMutation::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storage_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LogMutation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogMutation& LogMutation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fConfig_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();
#endif
  return *default_instance_;
}

LogMutation* LogMutation::default_instance_ = NULL;

LogMutation* LogMutation::New(::google::protobuf::Arena* arena) const {
  LogMutation* n = new LogMutation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMutation::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.Proto.LogMutation)
  if (_has_bits_[0 / 32] & 15u) {
    type_ = 0;
    if (has_storage_name()) {
      storage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    document_id_ = GOOGLE_LONGLONG(0);
    if (has_buffer()) {
      buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogMutation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForLogMutation, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Db.Proto.LogMutation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Db.Proto.LogMutation.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Db::Proto::LogMutation_Type_IsValid(value)) {
            set_type(static_cast< ::Db::Proto::LogMutation_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_storage_name;
        break;
      }

      // optional string storage_name = 2;
      case 2: {
        if (tag == 18) {
         parse_storage_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_document_id;
        break;
      }

      // optional int64 document_id = 3;
      case 3: {
        if (tag == 24) {
         parse_document_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &document_id_)));
          set_has_document_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_buffer;
        break;
      }

      // optional string buffer = 4;
      case 4: {
        if (tag == 34) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Db.Proto.LogMutation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Db.Proto.LogMutation)
  return false;
#undef DO_
}

void LogMutation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Db.Proto.LogMutation)
  // optional .Db.Proto.LogMutation.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string storage_name = 2;
  if (has_storage_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->storage_name(), output);
  }

  // optional int64 document_id = 3;
  if (has_document_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->document_id(), output);
  }

  // optional string buffer = 4;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Db.Proto.LogMutation)
}

int LogMutation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Db.Proto.LogMutation)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .Db.Proto.LogMutation.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string storage_name = 2;
    if (has_storage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage_name());
    }

    // optional int64 document_id = 3;
    if (has_document_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->document_id());
    }

    // optional string buffer = 4;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buffer());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMutation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogMutation*>(&from));
}

void LogMutation::MergeFrom(const LogMutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Db.Proto.LogMutation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_storage_name()) {
      set_has_storage_name();
      storage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storage_name_);
    }
    if (from.has_document_id()) {
      set_document_id(from.document_id());
    }
    if (from.has_buffer()) {
      set_has_buffer();
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void LogMutation::CopyFrom(const LogMutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.Proto.LogMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMutation::IsInitialized() const {

  return true;
}

void LogMutation::Swap(LogMutation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMutation::InternalSwap(LogMutation* other) {
  std::swap(type_, other->type_);
  storage_name_.Swap(&other->storage_name_);
  std::swap(document_id_, other->document_id_);
  buffer_.Swap(&other->buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LogMutation::GetTypeName() const {
  return "Db.Proto.LogMutation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogMutation

// optional .Db.Proto.LogMutation.Type type = 1;
bool LogMutation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogMutation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void LogMutation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogMutation::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::Db::Proto::LogMutation_Type LogMutation::type() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogMutation.type)
  return static_cast< ::Db::Proto::LogMutation_Type >(type_);
}
 void LogMutation::set_type(::Db::Proto::LogMutation_Type value) {
  assert(::Db::Proto::LogMutation_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Db.Proto.LogMutation.type)
}

// optional string storage_name = 2;
bool LogMutation::has_storage_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogMutation::set_has_storage_name() {
  _has_bits_[0] |= 0x00000002u;
}
void LogMutation::clear_has_storage_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogMutation::clear_storage_name() {
  storage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_storage_name();
}
 const ::std::string& LogMutation::storage_name() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogMutation.storage_name)
  return storage_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogMutation::set_storage_name(const ::std::string& value) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Db.Proto.LogMutation.storage_name)
}
 void LogMutation::set_storage_name(const char* value) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Db.Proto.LogMutation.storage_name)
}
 void LogMutation::set_storage_name(const char* value, size_t size) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.LogMutation.storage_name)
}
 ::std::string* LogMutation::mutable_storage_name() {
  set_has_storage_name();
  // @@protoc_insertion_point(field_mutable:Db.Proto.LogMutation.storage_name)
  return storage_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogMutation::release_storage_name() {
  // @@protoc_insertion_point(field_release:Db.Proto.LogMutation.storage_name)
  clear_has_storage_name();
  return storage_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogMutation::set_allocated_storage_name(::std::string* storage_name) {
  if (storage_name != NULL) {
    set_has_storage_name();
  } else {
    clear_has_storage_name();
  }
  storage_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_name);
  // @@protoc_insertion_point(field_set_allocated:Db.Proto.LogMutation.storage_name)
}

// optional int64 document_id = 3;
bool LogMutation::has_document_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogMutation::set_has_document_id() {
  _has_bits_[0] |= 0x00000004u;
}
void LogMutation::clear_has_document_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogMutation::clear_document_id() {
  document_id_ = GOOGLE_LONGLONG(0);
  clear_has_document_id();
}
 ::google::protobuf::int64 LogMutation::document_id() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogMutation.document_id)
  return document_id_;
}
 void LogMutation::set_document_id(::google::protobuf::int64 value) {
  set_has_document_id();
  document_id_ = value;
  // @@protoc_insertion_point(field_set:Db.Proto.LogMutation.document_id)
}

// optional string buffer = 4;
bool LogMutation::has_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogMutation::set_has_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
void LogMutation::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogMutation::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
 const ::std::string& LogMutation::buffer() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogMutation.buffer)
  return buffer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogMutation::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Db.Proto.LogMutation.buffer)
}
 void LogMutation::set_buffer(const char* value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Db.Proto.LogMutation.buffer)
}
 void LogMutation::set_buffer(const char* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.LogMutation.buffer)
}
 ::std::string* LogMutation::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:Db.Proto.LogMutation.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogMutation::release_buffer() {
  // @@protoc_insertion_point(field_release:Db.Proto.LogMutation.buffer)
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogMutation::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:Db.Proto.LogMutation.buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForLogEntry(
    LogEntry* ptr) {
  return ptr->mutable_unknown_fields();
}

bool LogEntry_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LogEntry_Type LogEntry::kTypeNone;
const LogEntry_Type LogEntry::kTypeSubmit;
const LogEntry_Type LogEntry::kTypeSubmitCommit;
const LogEntry_Type LogEntry::kTypeCommit;
const LogEntry_Type LogEntry::kTypeRollback;
const LogEntry_Type LogEntry::Type_MIN;
const LogEntry_Type LogEntry::Type_MAX;
const int LogEntry::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntry::kTypeFieldNumber;
const int LogEntry::kSequenceIdFieldNumber;
const int LogEntry::kTransactionIdFieldNumber;
const int LogEntry::kMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntry::LogEntry()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Db.Proto.LogEntry)
}

void LogEntry::InitAsDefaultInstance() {
}

LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Db.Proto.LogEntry)
}

void LogEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  sequence_id_ = GOOGLE_LONGLONG(0);
  transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:Db.Proto.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogEntry& LogEntry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_proto_2fConfig_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();
#endif
  return *default_instance_;
}

LogEntry* LogEntry::default_instance_ = NULL;

LogEntry* LogEntry::New(::google::protobuf::Arena* arena) const {
  LogEntry* n = new LogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.Proto.LogEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(sequence_id_, transaction_id_);
    type_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  mutations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForLogEntry, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Db.Proto.LogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Db.Proto.LogEntry.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Db::Proto::LogEntry_Type_IsValid(value)) {
            set_type(static_cast< ::Db::Proto::LogEntry_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence_id;
        break;
      }

      // optional int64 sequence_id = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_transaction_id;
        break;
      }

      // optional int64 transaction_id = 3;
      case 3: {
        if (tag == 24) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mutations;
        break;
      }

      // repeated .Db.Proto.LogMutation mutations = 4;
      case 4: {
        if (tag == 34) {
         parse_mutations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Db.Proto.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Db.Proto.LogEntry)
  return false;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Db.Proto.LogEntry)
  // optional .Db.Proto.LogEntry.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 sequence_id = 2;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence_id(), output);
  }

  // optional int64 transaction_id = 3;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->transaction_id(), output);
  }

  // repeated .Db.Proto.LogMutation mutations = 4;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->mutations(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Db.Proto.LogEntry)
}

int LogEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Db.Proto.LogEntry)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .Db.Proto.LogEntry.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 sequence_id = 2;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence_id());
    }

    // optional int64 transaction_id = 3;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

  }
  // repeated .Db.Proto.LogMutation mutations = 4;
  total_size += 1 * this->mutations_size();
  for (int i = 0; i < this->mutations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutations(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogEntry*>(&from));
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Db.Proto.LogEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mutations_.MergeFrom(from.mutations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.Proto.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {

  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogEntry::InternalSwap(LogEntry* other) {
  std::swap(type_, other->type_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(transaction_id_, other->transaction_id_);
  mutations_.UnsafeArenaSwap(&other->mutations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LogEntry::GetTypeName() const {
  return "Db.Proto.LogEntry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogEntry

// optional .Db.Proto.LogEntry.Type type = 1;
bool LogEntry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogEntry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void LogEntry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogEntry::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::Db::Proto::LogEntry_Type LogEntry::type() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogEntry.type)
  return static_cast< ::Db::Proto::LogEntry_Type >(type_);
}
 void LogEntry::set_type(::Db::Proto::LogEntry_Type value) {
  assert(::Db::Proto::LogEntry_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Db.Proto.LogEntry.type)
}

// optional int64 sequence_id = 2;
bool LogEntry::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogEntry::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
void LogEntry::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogEntry::clear_sequence_id() {
  sequence_id_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_id();
}
 ::google::protobuf::int64 LogEntry::sequence_id() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogEntry.sequence_id)
  return sequence_id_;
}
 void LogEntry::set_sequence_id(::google::protobuf::int64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:Db.Proto.LogEntry.sequence_id)
}

// optional int64 transaction_id = 3;
bool LogEntry::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogEntry::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000004u;
}
void LogEntry::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogEntry::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 LogEntry::transaction_id() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogEntry.transaction_id)
  return transaction_id_;
}
 void LogEntry::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:Db.Proto.LogEntry.transaction_id)
}

// repeated .Db.Proto.LogMutation mutations = 4;
int LogEntry::mutations_size() const {
  return mutations_.size();
}
void LogEntry::clear_mutations() {
  mutations_.Clear();
}
const ::Db::Proto::LogMutation& LogEntry::mutations(int index) const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogEntry.mutations)
  return mutations_.Get(index);
}
::Db::Proto::LogMutation* LogEntry::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:Db.Proto.LogEntry.mutations)
  return mutations_.Mutable(index);
}
::Db::Proto::LogMutation* LogEntry::add_mutations() {
  // @@protoc_insertion_point(field_add:Db.Proto.LogEntry.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::Db::Proto::LogMutation >*
LogEntry::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:Db.Proto.LogEntry.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::Db::Proto::LogMutation >&
LogEntry::mutations() const {
  // @@protoc_insertion_point(field_list:Db.Proto.LogEntry.mutations)
  return mutations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Db

// @@protoc_insertion_point(global_scope)
