// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/Config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Db {
namespace Proto {

void protobuf_ShutdownFile_proto_2fConfig_2eproto() {
  delete Config::default_instance_;
  delete StorageConfig::default_instance_;
  delete ViewConfig::default_instance_;
  delete LogMutation::default_instance_;
  delete LogEntry::default_instance_;
}

void protobuf_AddDesc_proto_2fConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Config::default_instance_ = new Config();
  StorageConfig::default_instance_ = new StorageConfig();
  ViewConfig::default_instance_ = new ViewConfig();
  LogMutation::default_instance_ = new LogMutation();
  LogEntry::default_instance_ = new LogEntry();
  Config::default_instance_->InitAsDefaultInstance();
  StorageConfig::default_instance_->InitAsDefaultInstance();
  ViewConfig::default_instance_->InitAsDefaultInstance();
  LogMutation::default_instance_->InitAsDefaultInstance();
  LogEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fConfig_2eproto {
  StaticDescriptorInitializer_proto_2fConfig_2eproto() {
    protobuf_AddDesc_proto_2fConfig_2eproto();
  }
} static_descriptor_initializer_proto_2fConfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Config::kStorageFieldNumber;
const int Config::kViewsFieldNumber;
#endif  // !_MSC_VER

Config::Config()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Config::InitAsDefaultInstance() {
}

Config::Config(const Config& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Config& Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New() const {
  return new Config;
}

void Config::Clear() {
  storage_.Clear();
  views_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Db.Proto.StorageConfig storage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_storage;
        if (input->ExpectTag(18)) goto parse_views;
        break;
      }
      
      // repeated .Db.Proto.ViewConfig views = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_views:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_views()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_views;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Db.Proto.StorageConfig storage = 1;
  for (int i = 0; i < this->storage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->storage(i), output);
  }
  
  // repeated .Db.Proto.ViewConfig views = 2;
  for (int i = 0; i < this->views_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->views(i), output);
  }
  
}

int Config::ByteSize() const {
  int total_size = 0;
  
  // repeated .Db.Proto.StorageConfig storage = 1;
  total_size += 1 * this->storage_size();
  for (int i = 0; i < this->storage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storage(i));
  }
  
  // repeated .Db.Proto.ViewConfig views = 2;
  total_size += 1 * this->views_size();
  for (int i = 0; i < this->views_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->views(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Config*>(&from));
}

void Config::MergeFrom(const Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  storage_.MergeFrom(from.storage_);
  views_.MergeFrom(from.views_);
}

void Config::CopyFrom(const Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  
  for (int i = 0; i < storage_size(); i++) {
    if (!this->storage(i).IsInitialized()) return false;
  }
  for (int i = 0; i < views_size(); i++) {
    if (!this->views(i).IsInitialized()) return false;
  }
  return true;
}

void Config::Swap(Config* other) {
  if (other != this) {
    storage_.Swap(&other->storage_);
    views_.Swap(&other->views_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Config::GetTypeName() const {
  return "Db.Proto.Config";
}


// ===================================================================

#ifndef _MSC_VER
const int StorageConfig::kDriverFieldNumber;
const int StorageConfig::kIdentifierFieldNumber;
#endif  // !_MSC_VER

StorageConfig::StorageConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StorageConfig::InitAsDefaultInstance() {
}

StorageConfig::StorageConfig(const StorageConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StorageConfig::SharedCtor() {
  _cached_size_ = 0;
  driver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageConfig::~StorageConfig() {
  SharedDtor();
}

void StorageConfig::SharedDtor() {
  if (driver_ != &::google::protobuf::internal::kEmptyString) {
    delete driver_;
  }
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
  }
}

void StorageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StorageConfig& StorageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();  return *default_instance_;
}

StorageConfig* StorageConfig::default_instance_ = NULL;

StorageConfig* StorageConfig::New() const {
  return new StorageConfig;
}

void StorageConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_driver()) {
      if (driver_ != &::google::protobuf::internal::kEmptyString) {
        driver_->clear();
      }
    }
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string driver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_identifier;
        break;
      }
      
      // required string identifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string driver = 1;
  if (has_driver()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->driver(), output);
  }
  
  // required string identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->identifier(), output);
  }
  
}

int StorageConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string driver = 1;
    if (has_driver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver());
    }
    
    // required string identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StorageConfig*>(&from));
}

void StorageConfig::MergeFrom(const StorageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_driver()) {
      set_driver(from.driver());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
  }
}

void StorageConfig::CopyFrom(const StorageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StorageConfig::Swap(StorageConfig* other) {
  if (other != this) {
    std::swap(driver_, other->driver_);
    std::swap(identifier_, other->identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StorageConfig::GetTypeName() const {
  return "Db.Proto.StorageConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int ViewConfig::kDriverFieldNumber;
const int ViewConfig::kIdentifierFieldNumber;
const int ViewConfig::kBaseStorageFieldNumber;
const int ViewConfig::kScriptFileFieldNumber;
#endif  // !_MSC_VER

ViewConfig::ViewConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ViewConfig::InitAsDefaultInstance() {
}

ViewConfig::ViewConfig(const ViewConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ViewConfig::SharedCtor() {
  _cached_size_ = 0;
  driver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  base_storage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  script_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewConfig::~ViewConfig() {
  SharedDtor();
}

void ViewConfig::SharedDtor() {
  if (driver_ != &::google::protobuf::internal::kEmptyString) {
    delete driver_;
  }
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (base_storage_ != &::google::protobuf::internal::kEmptyString) {
    delete base_storage_;
  }
  if (script_file_ != &::google::protobuf::internal::kEmptyString) {
    delete script_file_;
  }
  if (this != default_instance_) {
  }
}

void ViewConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ViewConfig& ViewConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();  return *default_instance_;
}

ViewConfig* ViewConfig::default_instance_ = NULL;

ViewConfig* ViewConfig::New() const {
  return new ViewConfig;
}

void ViewConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_driver()) {
      if (driver_ != &::google::protobuf::internal::kEmptyString) {
        driver_->clear();
      }
    }
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
    if (has_base_storage()) {
      if (base_storage_ != &::google::protobuf::internal::kEmptyString) {
        base_storage_->clear();
      }
    }
    if (has_script_file()) {
      if (script_file_ != &::google::protobuf::internal::kEmptyString) {
        script_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ViewConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string driver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_identifier;
        break;
      }
      
      // required string identifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1026)) goto parse_base_storage;
        break;
      }
      
      // optional string base_storage = 128;
      case 128: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1034)) goto parse_script_file;
        break;
      }
      
      // optional string script_file = 129;
      case 129: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ViewConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string driver = 1;
  if (has_driver()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->driver(), output);
  }
  
  // required string identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->identifier(), output);
  }
  
  // optional string base_storage = 128;
  if (has_base_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      128, this->base_storage(), output);
  }
  
  // optional string script_file = 129;
  if (has_script_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      129, this->script_file(), output);
  }
  
}

int ViewConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string driver = 1;
    if (has_driver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver());
    }
    
    // required string identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }
    
    // optional string base_storage = 128;
    if (has_base_storage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_storage());
    }
    
    // optional string script_file = 129;
    if (has_script_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script_file());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ViewConfig*>(&from));
}

void ViewConfig::MergeFrom(const ViewConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_driver()) {
      set_driver(from.driver());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_base_storage()) {
      set_base_storage(from.base_storage());
    }
    if (from.has_script_file()) {
      set_script_file(from.script_file());
    }
  }
}

void ViewConfig::CopyFrom(const ViewConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ViewConfig::Swap(ViewConfig* other) {
  if (other != this) {
    std::swap(driver_, other->driver_);
    std::swap(identifier_, other->identifier_);
    std::swap(base_storage_, other->base_storage_);
    std::swap(script_file_, other->script_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ViewConfig::GetTypeName() const {
  return "Db.Proto.ViewConfig";
}


// ===================================================================

bool LogMutation_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogMutation_Type LogMutation::kTypeNone;
const LogMutation_Type LogMutation::kTypeInsert;
const LogMutation_Type LogMutation::kTypeModify;
const LogMutation_Type LogMutation::Type_MIN;
const LogMutation_Type LogMutation::Type_MAX;
const int LogMutation::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogMutation::kTypeFieldNumber;
const int LogMutation::kStorageNameFieldNumber;
const int LogMutation::kDocumentIdFieldNumber;
const int LogMutation::kBufferFieldNumber;
#endif  // !_MSC_VER

LogMutation::LogMutation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LogMutation::InitAsDefaultInstance() {
}

LogMutation::LogMutation(const LogMutation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LogMutation::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  storage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  document_id_ = GOOGLE_LONGLONG(0);
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMutation::~LogMutation() {
  SharedDtor();
}

void LogMutation::SharedDtor() {
  if (storage_name_ != &::google::protobuf::internal::kEmptyString) {
    delete storage_name_;
  }
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (this != default_instance_) {
  }
}

void LogMutation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogMutation& LogMutation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();  return *default_instance_;
}

LogMutation* LogMutation::default_instance_ = NULL;

LogMutation* LogMutation::New() const {
  return new LogMutation;
}

void LogMutation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_storage_name()) {
      if (storage_name_ != &::google::protobuf::internal::kEmptyString) {
        storage_name_->clear();
      }
    }
    document_id_ = GOOGLE_LONGLONG(0);
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::kEmptyString) {
        buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LogMutation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Db.Proto.LogMutation.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Db::Proto::LogMutation_Type_IsValid(value)) {
            set_type(static_cast< ::Db::Proto::LogMutation_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage_name;
        break;
      }
      
      // optional string storage_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_document_id;
        break;
      }
      
      // optional int64 document_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_document_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &document_id_)));
          set_has_document_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_buffer;
        break;
      }
      
      // optional string buffer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogMutation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Db.Proto.LogMutation.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string storage_name = 2;
  if (has_storage_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->storage_name(), output);
  }
  
  // optional int64 document_id = 3;
  if (has_document_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->document_id(), output);
  }
  
  // optional string buffer = 4;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->buffer(), output);
  }
  
}

int LogMutation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Db.Proto.LogMutation.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string storage_name = 2;
    if (has_storage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage_name());
    }
    
    // optional int64 document_id = 3;
    if (has_document_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->document_id());
    }
    
    // optional string buffer = 4;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buffer());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMutation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogMutation*>(&from));
}

void LogMutation::MergeFrom(const LogMutation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_storage_name()) {
      set_storage_name(from.storage_name());
    }
    if (from.has_document_id()) {
      set_document_id(from.document_id());
    }
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
  }
}

void LogMutation::CopyFrom(const LogMutation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMutation::IsInitialized() const {
  
  return true;
}

void LogMutation::Swap(LogMutation* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(storage_name_, other->storage_name_);
    std::swap(document_id_, other->document_id_);
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LogMutation::GetTypeName() const {
  return "Db.Proto.LogMutation";
}


// ===================================================================

bool LogEntry_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogEntry_Type LogEntry::kTypeNone;
const LogEntry_Type LogEntry::kTypeSubmit;
const LogEntry_Type LogEntry::kTypeSubmitCommit;
const LogEntry_Type LogEntry::kTypeCommit;
const LogEntry_Type LogEntry::kTypeRollback;
const LogEntry_Type LogEntry::Type_MIN;
const LogEntry_Type LogEntry::Type_MAX;
const int LogEntry::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogEntry::kTypeFieldNumber;
const int LogEntry::kSequenceIdFieldNumber;
const int LogEntry::kTransactionIdFieldNumber;
const int LogEntry::kMutationsFieldNumber;
#endif  // !_MSC_VER

LogEntry::LogEntry()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LogEntry::InitAsDefaultInstance() {
}

LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LogEntry::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  sequence_id_ = GOOGLE_LONGLONG(0);
  transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntry::~LogEntry() {
  SharedDtor();
}

void LogEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogEntry& LogEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();  return *default_instance_;
}

LogEntry* LogEntry::default_instance_ = NULL;

LogEntry* LogEntry::New() const {
  return new LogEntry;
}

void LogEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    sequence_id_ = GOOGLE_LONGLONG(0);
    transaction_id_ = GOOGLE_LONGLONG(0);
  }
  mutations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Db.Proto.LogEntry.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Db::Proto::LogEntry_Type_IsValid(value)) {
            set_type(static_cast< ::Db::Proto::LogEntry_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence_id;
        break;
      }
      
      // optional int64 sequence_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_transaction_id;
        break;
      }
      
      // optional int64 transaction_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mutations;
        break;
      }
      
      // repeated .Db.Proto.LogMutation mutations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mutations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mutations;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Db.Proto.LogEntry.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int64 sequence_id = 2;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence_id(), output);
  }
  
  // optional int64 transaction_id = 3;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->transaction_id(), output);
  }
  
  // repeated .Db.Proto.LogMutation mutations = 4;
  for (int i = 0; i < this->mutations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->mutations(i), output);
  }
  
}

int LogEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Db.Proto.LogEntry.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int64 sequence_id = 2;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence_id());
    }
    
    // optional int64 transaction_id = 3;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }
    
  }
  // repeated .Db.Proto.LogMutation mutations = 4;
  total_size += 1 * this->mutations_size();
  for (int i = 0; i < this->mutations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutations(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogEntry*>(&from));
}

void LogEntry::MergeFrom(const LogEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutations_.MergeFrom(from.mutations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
}

void LogEntry::CopyFrom(const LogEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  
  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(sequence_id_, other->sequence_id_);
    std::swap(transaction_id_, other->transaction_id_);
    mutations_.Swap(&other->mutations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LogEntry::GetTypeName() const {
  return "Db.Proto.LogEntry";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Db

// @@protoc_insertion_point(global_scope)
