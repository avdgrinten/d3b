// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/Config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Db {
namespace Proto {

void protobuf_ShutdownFile_proto_2fConfig_2eproto() {
  delete Config::default_instance_;
  delete StorageConfig::default_instance_;
  delete ViewConfig::default_instance_;
}

void protobuf_AddDesc_proto_2fConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Config::default_instance_ = new Config();
  StorageConfig::default_instance_ = new StorageConfig();
  ViewConfig::default_instance_ = new ViewConfig();
  Config::default_instance_->InitAsDefaultInstance();
  StorageConfig::default_instance_->InitAsDefaultInstance();
  ViewConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fConfig_2eproto {
  StaticDescriptorInitializer_proto_2fConfig_2eproto() {
    protobuf_AddDesc_proto_2fConfig_2eproto();
  }
} static_descriptor_initializer_proto_2fConfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Config::kStorageFieldNumber;
const int Config::kViewsFieldNumber;
#endif  // !_MSC_VER

Config::Config()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Config::InitAsDefaultInstance() {
}

Config::Config(const Config& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Config& Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New() const {
  return new Config;
}

void Config::Clear() {
  storage_.Clear();
  views_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Db.Proto.StorageConfig storage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_storage;
        if (input->ExpectTag(18)) goto parse_views;
        break;
      }
      
      // repeated .Db.Proto.ViewConfig views = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_views:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_views()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_views;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Db.Proto.StorageConfig storage = 1;
  for (int i = 0; i < this->storage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->storage(i), output);
  }
  
  // repeated .Db.Proto.ViewConfig views = 2;
  for (int i = 0; i < this->views_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->views(i), output);
  }
  
}

int Config::ByteSize() const {
  int total_size = 0;
  
  // repeated .Db.Proto.StorageConfig storage = 1;
  total_size += 1 * this->storage_size();
  for (int i = 0; i < this->storage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storage(i));
  }
  
  // repeated .Db.Proto.ViewConfig views = 2;
  total_size += 1 * this->views_size();
  for (int i = 0; i < this->views_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->views(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Config*>(&from));
}

void Config::MergeFrom(const Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  storage_.MergeFrom(from.storage_);
  views_.MergeFrom(from.views_);
}

void Config::CopyFrom(const Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  
  for (int i = 0; i < storage_size(); i++) {
    if (!this->storage(i).IsInitialized()) return false;
  }
  for (int i = 0; i < views_size(); i++) {
    if (!this->views(i).IsInitialized()) return false;
  }
  return true;
}

void Config::Swap(Config* other) {
  if (other != this) {
    storage_.Swap(&other->storage_);
    views_.Swap(&other->views_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Config::GetTypeName() const {
  return "Db.Proto.Config";
}


// ===================================================================

#ifndef _MSC_VER
const int StorageConfig::kDriverFieldNumber;
const int StorageConfig::kIdentifierFieldNumber;
#endif  // !_MSC_VER

StorageConfig::StorageConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StorageConfig::InitAsDefaultInstance() {
}

StorageConfig::StorageConfig(const StorageConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StorageConfig::SharedCtor() {
  _cached_size_ = 0;
  driver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageConfig::~StorageConfig() {
  SharedDtor();
}

void StorageConfig::SharedDtor() {
  if (driver_ != &::google::protobuf::internal::kEmptyString) {
    delete driver_;
  }
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
  }
}

void StorageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StorageConfig& StorageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();  return *default_instance_;
}

StorageConfig* StorageConfig::default_instance_ = NULL;

StorageConfig* StorageConfig::New() const {
  return new StorageConfig;
}

void StorageConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_driver()) {
      if (driver_ != &::google::protobuf::internal::kEmptyString) {
        driver_->clear();
      }
    }
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string driver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_identifier;
        break;
      }
      
      // required string identifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string driver = 1;
  if (has_driver()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->driver(), output);
  }
  
  // required string identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->identifier(), output);
  }
  
}

int StorageConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string driver = 1;
    if (has_driver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver());
    }
    
    // required string identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StorageConfig*>(&from));
}

void StorageConfig::MergeFrom(const StorageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_driver()) {
      set_driver(from.driver());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
  }
}

void StorageConfig::CopyFrom(const StorageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StorageConfig::Swap(StorageConfig* other) {
  if (other != this) {
    std::swap(driver_, other->driver_);
    std::swap(identifier_, other->identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StorageConfig::GetTypeName() const {
  return "Db.Proto.StorageConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int ViewConfig::kDriverFieldNumber;
const int ViewConfig::kIdentifierFieldNumber;
const int ViewConfig::kBaseStorageFieldNumber;
const int ViewConfig::kScriptFileFieldNumber;
#endif  // !_MSC_VER

ViewConfig::ViewConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ViewConfig::InitAsDefaultInstance() {
}

ViewConfig::ViewConfig(const ViewConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ViewConfig::SharedCtor() {
  _cached_size_ = 0;
  driver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  base_storage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  script_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewConfig::~ViewConfig() {
  SharedDtor();
}

void ViewConfig::SharedDtor() {
  if (driver_ != &::google::protobuf::internal::kEmptyString) {
    delete driver_;
  }
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (base_storage_ != &::google::protobuf::internal::kEmptyString) {
    delete base_storage_;
  }
  if (script_file_ != &::google::protobuf::internal::kEmptyString) {
    delete script_file_;
  }
  if (this != default_instance_) {
  }
}

void ViewConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ViewConfig& ViewConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fConfig_2eproto();  return *default_instance_;
}

ViewConfig* ViewConfig::default_instance_ = NULL;

ViewConfig* ViewConfig::New() const {
  return new ViewConfig;
}

void ViewConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_driver()) {
      if (driver_ != &::google::protobuf::internal::kEmptyString) {
        driver_->clear();
      }
    }
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
    if (has_base_storage()) {
      if (base_storage_ != &::google::protobuf::internal::kEmptyString) {
        base_storage_->clear();
      }
    }
    if (has_script_file()) {
      if (script_file_ != &::google::protobuf::internal::kEmptyString) {
        script_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ViewConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string driver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_identifier;
        break;
      }
      
      // required string identifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1026)) goto parse_base_storage;
        break;
      }
      
      // optional string base_storage = 128;
      case 128: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1034)) goto parse_script_file;
        break;
      }
      
      // optional string script_file = 129;
      case 129: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ViewConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string driver = 1;
  if (has_driver()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->driver(), output);
  }
  
  // required string identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->identifier(), output);
  }
  
  // optional string base_storage = 128;
  if (has_base_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      128, this->base_storage(), output);
  }
  
  // optional string script_file = 129;
  if (has_script_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      129, this->script_file(), output);
  }
  
}

int ViewConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string driver = 1;
    if (has_driver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver());
    }
    
    // required string identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }
    
    // optional string base_storage = 128;
    if (has_base_storage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_storage());
    }
    
    // optional string script_file = 129;
    if (has_script_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script_file());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ViewConfig*>(&from));
}

void ViewConfig::MergeFrom(const ViewConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_driver()) {
      set_driver(from.driver());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_base_storage()) {
      set_base_storage(from.base_storage());
    }
    if (from.has_script_file()) {
      set_script_file(from.script_file());
    }
  }
}

void ViewConfig::CopyFrom(const ViewConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ViewConfig::Swap(ViewConfig* other) {
  if (other != this) {
    std::swap(driver_, other->driver_);
    std::swap(identifier_, other->identifier_);
    std::swap(base_storage_, other->base_storage_);
    std::swap(script_file_, other->script_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ViewConfig::GetTypeName() const {
  return "Db.Proto.ViewConfig";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Db

// @@protoc_insertion_point(global_scope)
