// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Config.proto

#ifndef PROTOBUF_proto_2fConfig_2eproto__INCLUDED
#define PROTOBUF_proto_2fConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace Db {
namespace Proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fConfig_2eproto();
void protobuf_AssignDesc_proto_2fConfig_2eproto();
void protobuf_ShutdownFile_proto_2fConfig_2eproto();

class Config;
class LogEntry;
class LogMutation;
class StorageConfig;
class StorageDescriptor;
class ViewConfig;
class ViewDescriptor;

enum LogMutation_Type {
  LogMutation_Type_kTypeNone = 0,
  LogMutation_Type_kTypeInsert = 1,
  LogMutation_Type_kTypeModify = 2
};
bool LogMutation_Type_IsValid(int value);
const LogMutation_Type LogMutation_Type_Type_MIN = LogMutation_Type_kTypeNone;
const LogMutation_Type LogMutation_Type_Type_MAX = LogMutation_Type_kTypeModify;
const int LogMutation_Type_Type_ARRAYSIZE = LogMutation_Type_Type_MAX + 1;

enum LogEntry_Type {
  LogEntry_Type_kTypeNone = 0,
  LogEntry_Type_kTypeSubmit = 1,
  LogEntry_Type_kTypeSubmitCommit = 2,
  LogEntry_Type_kTypeCommit = 3,
  LogEntry_Type_kTypeRollback = 4
};
bool LogEntry_Type_IsValid(int value);
const LogEntry_Type LogEntry_Type_Type_MIN = LogEntry_Type_kTypeNone;
const LogEntry_Type LogEntry_Type_Type_MAX = LogEntry_Type_kTypeRollback;
const int LogEntry_Type_Type_ARRAYSIZE = LogEntry_Type_Type_MAX + 1;

// ===================================================================

class Config : public ::google::protobuf::MessageLite {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Config& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Config* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  inline Config* New() const { return New(NULL); }

  Config* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string storages = 1;
  int storages_size() const;
  void clear_storages();
  static const int kStoragesFieldNumber = 1;
  const ::std::string& storages(int index) const;
  ::std::string* mutable_storages(int index);
  void set_storages(int index, const ::std::string& value);
  void set_storages(int index, const char* value);
  void set_storages(int index, const char* value, size_t size);
  ::std::string* add_storages();
  void add_storages(const ::std::string& value);
  void add_storages(const char* value);
  void add_storages(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& storages() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_storages();

  // repeated string views = 2;
  int views_size() const;
  void clear_views();
  static const int kViewsFieldNumber = 2;
  const ::std::string& views(int index) const;
  ::std::string* mutable_views(int index);
  void set_views(int index, const ::std::string& value);
  void set_views(int index, const char* value);
  void set_views(int index, const char* value, size_t size);
  ::std::string* add_views();
  void add_views(const ::std::string& value);
  void add_views(const char* value);
  void add_views(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& views() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_views();

  // @@protoc_insertion_point(class_scope:Db.Proto.Config)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> storages_;
  ::google::protobuf::RepeatedPtrField< ::std::string> views_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto();
  #endif
  friend void protobuf_AssignDesc_proto_2fConfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fConfig_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// -------------------------------------------------------------------

class StorageDescriptor : public ::google::protobuf::MessageLite {
 public:
  StorageDescriptor();
  virtual ~StorageDescriptor();

  StorageDescriptor(const StorageDescriptor& from);

  inline StorageDescriptor& operator=(const StorageDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const StorageDescriptor& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StorageDescriptor* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StorageDescriptor* other);

  // implements Message ----------------------------------------------

  inline StorageDescriptor* New() const { return New(NULL); }

  StorageDescriptor* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StorageDescriptor& from);
  void MergeFrom(const StorageDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StorageDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string driver = 1;
  bool has_driver() const;
  void clear_driver();
  static const int kDriverFieldNumber = 1;
  const ::std::string& driver() const;
  void set_driver(const ::std::string& value);
  void set_driver(const char* value);
  void set_driver(const char* value, size_t size);
  ::std::string* mutable_driver();
  ::std::string* release_driver();
  void set_allocated_driver(::std::string* driver);

  // @@protoc_insertion_point(class_scope:Db.Proto.StorageDescriptor)
 private:
  inline void set_has_driver();
  inline void clear_has_driver();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr driver_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto();
  #endif
  friend void protobuf_AssignDesc_proto_2fConfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fConfig_2eproto();

  void InitAsDefaultInstance();
  static StorageDescriptor* default_instance_;
};
// -------------------------------------------------------------------

class ViewDescriptor : public ::google::protobuf::MessageLite {
 public:
  ViewDescriptor();
  virtual ~ViewDescriptor();

  ViewDescriptor(const ViewDescriptor& from);

  inline ViewDescriptor& operator=(const ViewDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const ViewDescriptor& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ViewDescriptor* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ViewDescriptor* other);

  // implements Message ----------------------------------------------

  inline ViewDescriptor* New() const { return New(NULL); }

  ViewDescriptor* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ViewDescriptor& from);
  void MergeFrom(const ViewDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ViewDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string driver = 1;
  bool has_driver() const;
  void clear_driver();
  static const int kDriverFieldNumber = 1;
  const ::std::string& driver() const;
  void set_driver(const ::std::string& value);
  void set_driver(const char* value);
  void set_driver(const char* value, size_t size);
  ::std::string* mutable_driver();
  ::std::string* release_driver();
  void set_allocated_driver(::std::string* driver);

  // @@protoc_insertion_point(class_scope:Db.Proto.ViewDescriptor)
 private:
  inline void set_has_driver();
  inline void clear_has_driver();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr driver_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto();
  #endif
  friend void protobuf_AssignDesc_proto_2fConfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fConfig_2eproto();

  void InitAsDefaultInstance();
  static ViewDescriptor* default_instance_;
};
// -------------------------------------------------------------------

class StorageConfig : public ::google::protobuf::MessageLite {
 public:
  StorageConfig();
  virtual ~StorageConfig();

  StorageConfig(const StorageConfig& from);

  inline StorageConfig& operator=(const StorageConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const StorageConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StorageConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StorageConfig* other);

  // implements Message ----------------------------------------------

  inline StorageConfig* New() const { return New(NULL); }

  StorageConfig* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StorageConfig& from);
  void MergeFrom(const StorageConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StorageConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Db.Proto.StorageConfig)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto();
  #endif
  friend void protobuf_AssignDesc_proto_2fConfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fConfig_2eproto();

  void InitAsDefaultInstance();
  static StorageConfig* default_instance_;
};
// -------------------------------------------------------------------

class ViewConfig : public ::google::protobuf::MessageLite {
 public:
  ViewConfig();
  virtual ~ViewConfig();

  ViewConfig(const ViewConfig& from);

  inline ViewConfig& operator=(const ViewConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const ViewConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ViewConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ViewConfig* other);

  // implements Message ----------------------------------------------

  inline ViewConfig* New() const { return New(NULL); }

  ViewConfig* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ViewConfig& from);
  void MergeFrom(const ViewConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ViewConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string base_storage = 128;
  bool has_base_storage() const;
  void clear_base_storage();
  static const int kBaseStorageFieldNumber = 128;
  const ::std::string& base_storage() const;
  void set_base_storage(const ::std::string& value);
  void set_base_storage(const char* value);
  void set_base_storage(const char* value, size_t size);
  ::std::string* mutable_base_storage();
  ::std::string* release_base_storage();
  void set_allocated_base_storage(::std::string* base_storage);

  // optional string script_file = 129;
  bool has_script_file() const;
  void clear_script_file();
  static const int kScriptFileFieldNumber = 129;
  const ::std::string& script_file() const;
  void set_script_file(const ::std::string& value);
  void set_script_file(const char* value);
  void set_script_file(const char* value, size_t size);
  ::std::string* mutable_script_file();
  ::std::string* release_script_file();
  void set_allocated_script_file(::std::string* script_file);

  // @@protoc_insertion_point(class_scope:Db.Proto.ViewConfig)
 private:
  inline void set_has_base_storage();
  inline void clear_has_base_storage();
  inline void set_has_script_file();
  inline void clear_has_script_file();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr base_storage_;
  ::google::protobuf::internal::ArenaStringPtr script_file_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto();
  #endif
  friend void protobuf_AssignDesc_proto_2fConfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fConfig_2eproto();

  void InitAsDefaultInstance();
  static ViewConfig* default_instance_;
};
// -------------------------------------------------------------------

class LogMutation : public ::google::protobuf::MessageLite {
 public:
  LogMutation();
  virtual ~LogMutation();

  LogMutation(const LogMutation& from);

  inline LogMutation& operator=(const LogMutation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const LogMutation& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LogMutation* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LogMutation* other);

  // implements Message ----------------------------------------------

  inline LogMutation* New() const { return New(NULL); }

  LogMutation* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LogMutation& from);
  void MergeFrom(const LogMutation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogMutation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef LogMutation_Type Type;
  static const Type kTypeNone =
    LogMutation_Type_kTypeNone;
  static const Type kTypeInsert =
    LogMutation_Type_kTypeInsert;
  static const Type kTypeModify =
    LogMutation_Type_kTypeModify;
  static inline bool Type_IsValid(int value) {
    return LogMutation_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LogMutation_Type_Type_MIN;
  static const Type Type_MAX =
    LogMutation_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LogMutation_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .Db.Proto.LogMutation.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Db::Proto::LogMutation_Type type() const;
  void set_type(::Db::Proto::LogMutation_Type value);

  // optional string storage_name = 2;
  bool has_storage_name() const;
  void clear_storage_name();
  static const int kStorageNameFieldNumber = 2;
  const ::std::string& storage_name() const;
  void set_storage_name(const ::std::string& value);
  void set_storage_name(const char* value);
  void set_storage_name(const char* value, size_t size);
  ::std::string* mutable_storage_name();
  ::std::string* release_storage_name();
  void set_allocated_storage_name(::std::string* storage_name);

  // optional int64 document_id = 3;
  bool has_document_id() const;
  void clear_document_id();
  static const int kDocumentIdFieldNumber = 3;
  ::google::protobuf::int64 document_id() const;
  void set_document_id(::google::protobuf::int64 value);

  // optional string buffer = 4;
  bool has_buffer() const;
  void clear_buffer();
  static const int kBufferFieldNumber = 4;
  const ::std::string& buffer() const;
  void set_buffer(const ::std::string& value);
  void set_buffer(const char* value);
  void set_buffer(const char* value, size_t size);
  ::std::string* mutable_buffer();
  ::std::string* release_buffer();
  void set_allocated_buffer(::std::string* buffer);

  // @@protoc_insertion_point(class_scope:Db.Proto.LogMutation)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_storage_name();
  inline void clear_has_storage_name();
  inline void set_has_document_id();
  inline void clear_has_document_id();
  inline void set_has_buffer();
  inline void clear_has_buffer();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr storage_name_;
  ::google::protobuf::int64 document_id_;
  ::google::protobuf::internal::ArenaStringPtr buffer_;
  int type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto();
  #endif
  friend void protobuf_AssignDesc_proto_2fConfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fConfig_2eproto();

  void InitAsDefaultInstance();
  static LogMutation* default_instance_;
};
// -------------------------------------------------------------------

class LogEntry : public ::google::protobuf::MessageLite {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const LogEntry& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LogEntry* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LogEntry* other);

  // implements Message ----------------------------------------------

  inline LogEntry* New() const { return New(NULL); }

  LogEntry* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef LogEntry_Type Type;
  static const Type kTypeNone =
    LogEntry_Type_kTypeNone;
  static const Type kTypeSubmit =
    LogEntry_Type_kTypeSubmit;
  static const Type kTypeSubmitCommit =
    LogEntry_Type_kTypeSubmitCommit;
  static const Type kTypeCommit =
    LogEntry_Type_kTypeCommit;
  static const Type kTypeRollback =
    LogEntry_Type_kTypeRollback;
  static inline bool Type_IsValid(int value) {
    return LogEntry_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LogEntry_Type_Type_MIN;
  static const Type Type_MAX =
    LogEntry_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LogEntry_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .Db.Proto.LogEntry.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Db::Proto::LogEntry_Type type() const;
  void set_type(::Db::Proto::LogEntry_Type value);

  // optional int64 sequence_id = 2;
  bool has_sequence_id() const;
  void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 2;
  ::google::protobuf::int64 sequence_id() const;
  void set_sequence_id(::google::protobuf::int64 value);

  // optional int64 transaction_id = 3;
  bool has_transaction_id() const;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 3;
  ::google::protobuf::int64 transaction_id() const;
  void set_transaction_id(::google::protobuf::int64 value);

  // repeated .Db.Proto.LogMutation mutations = 4;
  int mutations_size() const;
  void clear_mutations();
  static const int kMutationsFieldNumber = 4;
  const ::Db::Proto::LogMutation& mutations(int index) const;
  ::Db::Proto::LogMutation* mutable_mutations(int index);
  ::Db::Proto::LogMutation* add_mutations();
  ::google::protobuf::RepeatedPtrField< ::Db::Proto::LogMutation >*
      mutable_mutations();
  const ::google::protobuf::RepeatedPtrField< ::Db::Proto::LogMutation >&
      mutations() const;

  // @@protoc_insertion_point(class_scope:Db.Proto.LogEntry)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sequence_id();
  inline void clear_has_sequence_id();
  inline void set_has_transaction_id();
  inline void clear_has_transaction_id();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 sequence_id_;
  ::google::protobuf::int64 transaction_id_;
  ::google::protobuf::RepeatedPtrField< ::Db::Proto::LogMutation > mutations_;
  int type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_proto_2fConfig_2eproto();
  #endif
  friend void protobuf_AssignDesc_proto_2fConfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fConfig_2eproto();

  void InitAsDefaultInstance();
  static LogEntry* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Config

// repeated string storages = 1;
inline int Config::storages_size() const {
  return storages_.size();
}
inline void Config::clear_storages() {
  storages_.Clear();
}
inline const ::std::string& Config::storages(int index) const {
  // @@protoc_insertion_point(field_get:Db.Proto.Config.storages)
  return storages_.Get(index);
}
inline ::std::string* Config::mutable_storages(int index) {
  // @@protoc_insertion_point(field_mutable:Db.Proto.Config.storages)
  return storages_.Mutable(index);
}
inline void Config::set_storages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Db.Proto.Config.storages)
  storages_.Mutable(index)->assign(value);
}
inline void Config::set_storages(int index, const char* value) {
  storages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Db.Proto.Config.storages)
}
inline void Config::set_storages(int index, const char* value, size_t size) {
  storages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.Config.storages)
}
inline ::std::string* Config::add_storages() {
  // @@protoc_insertion_point(field_add_mutable:Db.Proto.Config.storages)
  return storages_.Add();
}
inline void Config::add_storages(const ::std::string& value) {
  storages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Db.Proto.Config.storages)
}
inline void Config::add_storages(const char* value) {
  storages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Db.Proto.Config.storages)
}
inline void Config::add_storages(const char* value, size_t size) {
  storages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Db.Proto.Config.storages)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config::storages() const {
  // @@protoc_insertion_point(field_list:Db.Proto.Config.storages)
  return storages_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Config::mutable_storages() {
  // @@protoc_insertion_point(field_mutable_list:Db.Proto.Config.storages)
  return &storages_;
}

// repeated string views = 2;
inline int Config::views_size() const {
  return views_.size();
}
inline void Config::clear_views() {
  views_.Clear();
}
inline const ::std::string& Config::views(int index) const {
  // @@protoc_insertion_point(field_get:Db.Proto.Config.views)
  return views_.Get(index);
}
inline ::std::string* Config::mutable_views(int index) {
  // @@protoc_insertion_point(field_mutable:Db.Proto.Config.views)
  return views_.Mutable(index);
}
inline void Config::set_views(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Db.Proto.Config.views)
  views_.Mutable(index)->assign(value);
}
inline void Config::set_views(int index, const char* value) {
  views_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Db.Proto.Config.views)
}
inline void Config::set_views(int index, const char* value, size_t size) {
  views_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.Config.views)
}
inline ::std::string* Config::add_views() {
  // @@protoc_insertion_point(field_add_mutable:Db.Proto.Config.views)
  return views_.Add();
}
inline void Config::add_views(const ::std::string& value) {
  views_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Db.Proto.Config.views)
}
inline void Config::add_views(const char* value) {
  views_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Db.Proto.Config.views)
}
inline void Config::add_views(const char* value, size_t size) {
  views_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Db.Proto.Config.views)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config::views() const {
  // @@protoc_insertion_point(field_list:Db.Proto.Config.views)
  return views_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Config::mutable_views() {
  // @@protoc_insertion_point(field_mutable_list:Db.Proto.Config.views)
  return &views_;
}

// -------------------------------------------------------------------

// StorageDescriptor

// required string driver = 1;
inline bool StorageDescriptor::has_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageDescriptor::set_has_driver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageDescriptor::clear_has_driver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageDescriptor::clear_driver() {
  driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_driver();
}
inline const ::std::string& StorageDescriptor::driver() const {
  // @@protoc_insertion_point(field_get:Db.Proto.StorageDescriptor.driver)
  return driver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageDescriptor::set_driver(const ::std::string& value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Db.Proto.StorageDescriptor.driver)
}
inline void StorageDescriptor::set_driver(const char* value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Db.Proto.StorageDescriptor.driver)
}
inline void StorageDescriptor::set_driver(const char* value, size_t size) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.StorageDescriptor.driver)
}
inline ::std::string* StorageDescriptor::mutable_driver() {
  set_has_driver();
  // @@protoc_insertion_point(field_mutable:Db.Proto.StorageDescriptor.driver)
  return driver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageDescriptor::release_driver() {
  // @@protoc_insertion_point(field_release:Db.Proto.StorageDescriptor.driver)
  clear_has_driver();
  return driver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageDescriptor::set_allocated_driver(::std::string* driver) {
  if (driver != NULL) {
    set_has_driver();
  } else {
    clear_has_driver();
  }
  driver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:Db.Proto.StorageDescriptor.driver)
}

// -------------------------------------------------------------------

// ViewDescriptor

// required string driver = 1;
inline bool ViewDescriptor::has_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewDescriptor::set_has_driver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewDescriptor::clear_has_driver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewDescriptor::clear_driver() {
  driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_driver();
}
inline const ::std::string& ViewDescriptor::driver() const {
  // @@protoc_insertion_point(field_get:Db.Proto.ViewDescriptor.driver)
  return driver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewDescriptor::set_driver(const ::std::string& value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Db.Proto.ViewDescriptor.driver)
}
inline void ViewDescriptor::set_driver(const char* value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Db.Proto.ViewDescriptor.driver)
}
inline void ViewDescriptor::set_driver(const char* value, size_t size) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.ViewDescriptor.driver)
}
inline ::std::string* ViewDescriptor::mutable_driver() {
  set_has_driver();
  // @@protoc_insertion_point(field_mutable:Db.Proto.ViewDescriptor.driver)
  return driver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewDescriptor::release_driver() {
  // @@protoc_insertion_point(field_release:Db.Proto.ViewDescriptor.driver)
  clear_has_driver();
  return driver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewDescriptor::set_allocated_driver(::std::string* driver) {
  if (driver != NULL) {
    set_has_driver();
  } else {
    clear_has_driver();
  }
  driver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:Db.Proto.ViewDescriptor.driver)
}

// -------------------------------------------------------------------

// StorageConfig

// -------------------------------------------------------------------

// ViewConfig

// optional string base_storage = 128;
inline bool ViewConfig::has_base_storage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewConfig::set_has_base_storage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewConfig::clear_has_base_storage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewConfig::clear_base_storage() {
  base_storage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base_storage();
}
inline const ::std::string& ViewConfig::base_storage() const {
  // @@protoc_insertion_point(field_get:Db.Proto.ViewConfig.base_storage)
  return base_storage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewConfig::set_base_storage(const ::std::string& value) {
  set_has_base_storage();
  base_storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Db.Proto.ViewConfig.base_storage)
}
inline void ViewConfig::set_base_storage(const char* value) {
  set_has_base_storage();
  base_storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Db.Proto.ViewConfig.base_storage)
}
inline void ViewConfig::set_base_storage(const char* value, size_t size) {
  set_has_base_storage();
  base_storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.ViewConfig.base_storage)
}
inline ::std::string* ViewConfig::mutable_base_storage() {
  set_has_base_storage();
  // @@protoc_insertion_point(field_mutable:Db.Proto.ViewConfig.base_storage)
  return base_storage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewConfig::release_base_storage() {
  // @@protoc_insertion_point(field_release:Db.Proto.ViewConfig.base_storage)
  clear_has_base_storage();
  return base_storage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewConfig::set_allocated_base_storage(::std::string* base_storage) {
  if (base_storage != NULL) {
    set_has_base_storage();
  } else {
    clear_has_base_storage();
  }
  base_storage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_storage);
  // @@protoc_insertion_point(field_set_allocated:Db.Proto.ViewConfig.base_storage)
}

// optional string script_file = 129;
inline bool ViewConfig::has_script_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ViewConfig::set_has_script_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ViewConfig::clear_has_script_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ViewConfig::clear_script_file() {
  script_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_script_file();
}
inline const ::std::string& ViewConfig::script_file() const {
  // @@protoc_insertion_point(field_get:Db.Proto.ViewConfig.script_file)
  return script_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewConfig::set_script_file(const ::std::string& value) {
  set_has_script_file();
  script_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Db.Proto.ViewConfig.script_file)
}
inline void ViewConfig::set_script_file(const char* value) {
  set_has_script_file();
  script_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Db.Proto.ViewConfig.script_file)
}
inline void ViewConfig::set_script_file(const char* value, size_t size) {
  set_has_script_file();
  script_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.ViewConfig.script_file)
}
inline ::std::string* ViewConfig::mutable_script_file() {
  set_has_script_file();
  // @@protoc_insertion_point(field_mutable:Db.Proto.ViewConfig.script_file)
  return script_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewConfig::release_script_file() {
  // @@protoc_insertion_point(field_release:Db.Proto.ViewConfig.script_file)
  clear_has_script_file();
  return script_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewConfig::set_allocated_script_file(::std::string* script_file) {
  if (script_file != NULL) {
    set_has_script_file();
  } else {
    clear_has_script_file();
  }
  script_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_file);
  // @@protoc_insertion_point(field_set_allocated:Db.Proto.ViewConfig.script_file)
}

// -------------------------------------------------------------------

// LogMutation

// optional .Db.Proto.LogMutation.Type type = 1;
inline bool LogMutation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogMutation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogMutation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogMutation::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Db::Proto::LogMutation_Type LogMutation::type() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogMutation.type)
  return static_cast< ::Db::Proto::LogMutation_Type >(type_);
}
inline void LogMutation::set_type(::Db::Proto::LogMutation_Type value) {
  assert(::Db::Proto::LogMutation_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Db.Proto.LogMutation.type)
}

// optional string storage_name = 2;
inline bool LogMutation::has_storage_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogMutation::set_has_storage_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogMutation::clear_has_storage_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogMutation::clear_storage_name() {
  storage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_storage_name();
}
inline const ::std::string& LogMutation::storage_name() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogMutation.storage_name)
  return storage_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMutation::set_storage_name(const ::std::string& value) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Db.Proto.LogMutation.storage_name)
}
inline void LogMutation::set_storage_name(const char* value) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Db.Proto.LogMutation.storage_name)
}
inline void LogMutation::set_storage_name(const char* value, size_t size) {
  set_has_storage_name();
  storage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.LogMutation.storage_name)
}
inline ::std::string* LogMutation::mutable_storage_name() {
  set_has_storage_name();
  // @@protoc_insertion_point(field_mutable:Db.Proto.LogMutation.storage_name)
  return storage_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogMutation::release_storage_name() {
  // @@protoc_insertion_point(field_release:Db.Proto.LogMutation.storage_name)
  clear_has_storage_name();
  return storage_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMutation::set_allocated_storage_name(::std::string* storage_name) {
  if (storage_name != NULL) {
    set_has_storage_name();
  } else {
    clear_has_storage_name();
  }
  storage_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_name);
  // @@protoc_insertion_point(field_set_allocated:Db.Proto.LogMutation.storage_name)
}

// optional int64 document_id = 3;
inline bool LogMutation::has_document_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogMutation::set_has_document_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogMutation::clear_has_document_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogMutation::clear_document_id() {
  document_id_ = GOOGLE_LONGLONG(0);
  clear_has_document_id();
}
inline ::google::protobuf::int64 LogMutation::document_id() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogMutation.document_id)
  return document_id_;
}
inline void LogMutation::set_document_id(::google::protobuf::int64 value) {
  set_has_document_id();
  document_id_ = value;
  // @@protoc_insertion_point(field_set:Db.Proto.LogMutation.document_id)
}

// optional string buffer = 4;
inline bool LogMutation::has_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogMutation::set_has_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogMutation::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogMutation::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
inline const ::std::string& LogMutation::buffer() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogMutation.buffer)
  return buffer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMutation::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Db.Proto.LogMutation.buffer)
}
inline void LogMutation::set_buffer(const char* value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Db.Proto.LogMutation.buffer)
}
inline void LogMutation::set_buffer(const char* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Db.Proto.LogMutation.buffer)
}
inline ::std::string* LogMutation::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:Db.Proto.LogMutation.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogMutation::release_buffer() {
  // @@protoc_insertion_point(field_release:Db.Proto.LogMutation.buffer)
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMutation::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:Db.Proto.LogMutation.buffer)
}

// -------------------------------------------------------------------

// LogEntry

// optional .Db.Proto.LogEntry.Type type = 1;
inline bool LogEntry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogEntry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogEntry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogEntry::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Db::Proto::LogEntry_Type LogEntry::type() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogEntry.type)
  return static_cast< ::Db::Proto::LogEntry_Type >(type_);
}
inline void LogEntry::set_type(::Db::Proto::LogEntry_Type value) {
  assert(::Db::Proto::LogEntry_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Db.Proto.LogEntry.type)
}

// optional int64 sequence_id = 2;
inline bool LogEntry::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogEntry::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogEntry::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogEntry::clear_sequence_id() {
  sequence_id_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_id();
}
inline ::google::protobuf::int64 LogEntry::sequence_id() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogEntry.sequence_id)
  return sequence_id_;
}
inline void LogEntry::set_sequence_id(::google::protobuf::int64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:Db.Proto.LogEntry.sequence_id)
}

// optional int64 transaction_id = 3;
inline bool LogEntry::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogEntry::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogEntry::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogEntry::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
inline ::google::protobuf::int64 LogEntry::transaction_id() const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogEntry.transaction_id)
  return transaction_id_;
}
inline void LogEntry::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:Db.Proto.LogEntry.transaction_id)
}

// repeated .Db.Proto.LogMutation mutations = 4;
inline int LogEntry::mutations_size() const {
  return mutations_.size();
}
inline void LogEntry::clear_mutations() {
  mutations_.Clear();
}
inline const ::Db::Proto::LogMutation& LogEntry::mutations(int index) const {
  // @@protoc_insertion_point(field_get:Db.Proto.LogEntry.mutations)
  return mutations_.Get(index);
}
inline ::Db::Proto::LogMutation* LogEntry::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:Db.Proto.LogEntry.mutations)
  return mutations_.Mutable(index);
}
inline ::Db::Proto::LogMutation* LogEntry::add_mutations() {
  // @@protoc_insertion_point(field_add:Db.Proto.LogEntry.mutations)
  return mutations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Db::Proto::LogMutation >*
LogEntry::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:Db.Proto.LogEntry.mutations)
  return &mutations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Db::Proto::LogMutation >&
LogEntry::mutations() const {
  // @@protoc_insertion_point(field_list:Db.Proto.LogEntry.mutations)
  return mutations_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Db

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Db::Proto::LogMutation_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::Db::Proto::LogEntry_Type> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fConfig_2eproto__INCLUDED
